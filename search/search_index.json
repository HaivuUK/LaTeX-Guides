{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"A General Purpose Guide for Using LaTeX for Academic Writing  <p> GitHub Contact</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>This guide is designed to provide a good starting point for those looking to use LaTeX for academic writing. It is not intended to be a comprehensive guide, but rather a general purpose guide that will provide a good foundation for those looking to use LaTeX for academic writing and the transition from other word processing software.</p> <p>The guide is heavily influenced by the authors experience with LaTeX and the tools that they have found useful. It is intended to be a living document that will be updated as new tools and techniques are discovered. The guide is not intended to be a replacement for the official documentation, but rather a focused companion to it.</p> <p>The sources that helped to create this guide are:</p> <ul> <li>The LaTeX Project</li> <li>Overleaf Documentation</li> <li>Comprehensive TeX Archive Network</li> <li>Unofficial PGFPlots guide</li> </ul> <p>and other sources that will be referenced throughout the guide.</p>"},{"location":"index.html#contact","title":"Contact","text":"<p>If you have any questions, please contact the authors:</p> <p>George H. Allison (Email | LinkedIn)</p>"},{"location":"index.html#feedback-and-development","title":"Feedback and Development","text":"<p>This guide will be actively maintained for the foreseable future. If you have any feedback, please reach out or if the repository has been made public, please raise an issue or open a discussion on the repository.</p> <p>If you would like to contribute to the development of this guide, please reach out to the authors. Contributions are welcome, and the authors will be happy to discuss any changes you would like to make.</p> <p>Once the guide is made open-source Pull requests are welcome.</p>"},{"location":"index.html#references","title":"REFERENCES","text":"<p>1: The LaTeX Project Link</p> <p>2: Overleaf Documentation Link</p> <p>3: Comprehensive TeX Archive Network Link</p> <p>4: Unofficial PGFPlots guide Link</p>"},{"location":"bibliographies.html","title":"Bibliographies","text":""},{"location":"bibliographies.html#reference-management","title":"Reference Management","text":"<p>Note</p> <p>Only two tools will be discussed here, as they are the most popular and widely used. Alternatives are available, but I do not have enough experience with them to provide a fair comparison.</p>"},{"location":"bibliographies.html#zotero","title":"Zotero","text":"<p>Note</p> <p>For the best experience, use the Better BibTeX extension.</p>"},{"location":"bibliographies.html#better-bibtex","title":"Better BibTeX","text":""},{"location":"bibliographies.html#jabref","title":"JabRef","text":""},{"location":"bibliographies.html#bibtex-vs-biblatex-biber-vs-natbib","title":"BibTeX vs BibLaTeX &amp; biber vs natbib","text":""},{"location":"bibliographies.html#references-in-latex","title":"References in LaTeX","text":"<p>Note</p> <p>This will only discuss the modern method of using BibLaTeX and biber, and the current best available packages.  For the older method of using BibTeX and natbib, please refer to the  Overleaf documentation.</p>"},{"location":"bibliographies.html#hyperref","title":"hyperref","text":""},{"location":"bibliographies.html#zref","title":"zref","text":""},{"location":"bibliographies.html#zref-xr","title":"zref-xr","text":""},{"location":"bibliographies.html#zref-clever","title":"zref-clever","text":""},{"location":"code-display.html","title":"Code Display","text":"<p>The <code>minted</code> package is a popular choice for code display in LaTeX. It uses the Python package <code>Pygments</code> to  highlight code. To use <code>minted</code>, you need to have a Python distribution installed on your system. TeX Live will handle additional installations that are required. If you are using MikTeX more information can be found on the Minted CTAN Page.</p> <p>Note</p> <p>From version 3 of <code>minted</code>, shell escape is no longer required.</p> <p>Note</p> <p>Minted supports a wide range of languages, including Python, C++, Java, and many more. For a full list of supported languages, please refer to the Pygments documentation. Only Python will be  demonstrated here.</p>"},{"location":"code-display.html#using-minted-on-a-code-block","title":"Using minted on a code block","text":"<pre><code>\\documentclass{article}\n\n\\usepackage{minted}\n\\usepackage{xcolor}\n\\usepackage[margin={2.5cm,2.5cm}]{geometry}\n\\definecolor{code-bg}{RGB}{29, 35, 49}\n\\setminted{autogobble,breaklines,breakanywhere,python3}\n\n\\begin{document}\n    \\begin{minted}{python}\n        import pandas as pd\n        import matplotlib.pyplot as plt\n        import numpy as np\n\n        # Define the file path\n        file_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n        # Read the Excel file\n        # df = pd.read_csv(file_path)\n        df = pd.read_excel(file_path)\n\n        # Prepare data for box plot\n        # Transpose the DataFrame to have landmarks as columns and cases as rows\n        df_transposed = df.transpose()\n        # The first row now contains the landmarks, set it as header\n        df_transposed.columns = df_transposed.iloc[0]\n        # Drop the first row as it's now set as the header\n        df_transposed = df_transposed.drop(df_transposed.index[0])\n\n        # Convert all columns to numeric types, errors='coerce' will set non-convertible values to NaN\n        df_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n        # Plot the box plot\n        boxplot = df_transposed.boxplot()\n        plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n        # Customize the plot\n        plt.title('Displacement Distribution')\n        plt.xlabel('Landmark')\n        plt.ylabel('Displacement')\n\n        # Display the plot\n        plt.tight_layout()\n        plt.show()\n    \\end{minted}\n\\end{document}\n</code></pre> <p>Which would produce the following output:</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the file path\nfile_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n# Read the Excel file\n# df = pd.read_csv(file_path)\ndf = pd.read_excel(file_path)\n\n# Prepare data for box plot\n# Transpose the DataFrame to have landmarks as columns and cases as rows\ndf_transposed = df.transpose()\n# The first row now contains the landmarks, set it as header\ndf_transposed.columns = df_transposed.iloc[0]\n# Drop the first row as it's now set as the header\ndf_transposed = df_transposed.drop(df_transposed.index[0])\n\n# Convert all columns to numeric types, errors='coerce' will set non-convertible values to NaN\ndf_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n# Plot the box plot\nboxplot = df_transposed.boxplot()\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n# Customize the plot\nplt.title('Displacement Distribution')\nplt.xlabel('Landmark')\nplt.ylabel('Displacement')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"code-display.html#using-minted-on-python-file","title":"Using minted on python file","text":"<p><pre><code>\\inputminted{python}{path/to/your/file.py}\n</code></pre> Which would produce the same output as above.</p>"},{"location":"code-display.html#inline-code","title":"Inline code","text":"<p>To use <code>minted</code> for inline code, you can use the <code>\\mintinline</code> command. For example:</p> <pre><code>\\mintinline{python}{import pandas as pd}\n</code></pre>"},{"location":"code-display.html#customisation","title":"Customisation","text":"<p>There is a lot of customisation that can be done with <code>minted</code>. For more information, please refer to the  documentation and Pygments style documentation.</p>"},{"location":"code-display.html#using-minted-with-tcolorbox","title":"Using <code>minted</code> with <code>tcolorbox</code>","text":"<p>You can use <code>minted</code> with <code>tcolorbox</code> to create a box around your code. For example:</p> <p>This requires the <code>tcolorbox</code> package to be installed and called.</p> <pre><code>\\usepackage{tcolorbox}\n\\tcbuselibrary{minted}\n</code></pre> <p>Then you can use the following code:</p> <pre><code>\\begin{tcblisting}{listing only, minted language=python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the file path\nfile_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n# Read the Excel file\n# df = pd.read_csv(file_path)\ndf = pd.read_excel(file_path)\n\n# Prepare data\n# Transpose the DataFrame to have landmarks as columns and cases as rows\ndf_transposed = df.transpose()\n# The first row now contains the landmarks, set it as header\ndf_transposed.columns = df_transposed.iloc[0]\n# Drop the first row as it's now set\ndf_transposed = df_transposed.drop(df_transposed.index[0])\n\n# Convert all columns to numeric types, errors='coerce' will set non-convertible\ndf_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n# Plot the\nboxplot = df_transposed.boxplot()\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n# Customize the plot\nplt.title('Displacement Distribution')\nplt.xlabel('Landmark')\nplt.ylabel('Displacement')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n\\end{tcblisting}\n</code></pre> <p>Which would produce the following output:</p> <p></p>"},{"location":"conversion.html","title":"Conversion","text":"<p>Occasionally, you may need to convert a LaTeX document to a different format. There are a few tools and ways to do this, but the most common are:</p> <ul> <li>Pandoc</li> <li>TeX4ht</li> <li>PDF to Word converters</li> </ul> <p>Note</p> <p>As documents become more complex, the conversion process becomes more difficult. This is especially true for  documents that use a lot of custom packages or custom commands. In these cases, you may need to do some manual  editing after the conversion. It is often easier to convert the PDF to the desired format or convince the recipient  to accept the PDF/TeX.</p>"},{"location":"conversion.html#pdf-to-word-converters","title":"PDF to Word Converters","text":"<p>This is the quick and dirty method of converting a LaTeX document to a Word document. It is not perfect, and you will likely need to do some manual editing afterward, but it is a good starting point if you need a one-off conversion.</p> <p>There are a few PDF to Word converters available, but the most popular and widely used is Adobe Acrobat Pro. This is a paid software, but it is the most reliable and accurate I have used to date. It does offer a free alternative through a web interface, but this is more limited.</p> <p>Adobe PDF to Word Converter</p> <p>MS Word (and other word processor alternatives: OpenOffice, LibreOffice, WPS Office) also has a built-in PDF to Word  converter, but it is not as accurate as Adobe's. It is free, however, so it is worth trying if you do not have access  to Adobe Acrobat Pro. You can find this feature under the <code>File</code> menu, then <code>Open</code>, and select the PDF file you want  to convert. The accuracy of this tool is highly dependent on the complexity of the document, so you may need to do  some manual editing afterward.</p>"},{"location":"conversion.html#pandoc","title":"Pandoc","text":"<p>Pandoc is a universal document converter that can convert between a wide range of formats. It is a command-line tool, so it is not as user-friendly as some other tools, but it is very powerful and flexible. It can convert between LaTeX, Word, HTML, Markdown, and many other formats.</p> <p>Using it can be as simple as running the following command:</p> <pre><code>pandoc input.tex -o output.docx\n</code></pre> <p>Where the document becomes more complex, you may need to provide additional options to get the desired output. The Pandoc documentation is very comprehensive and provides a lot of information on how to use the tool. However, here is a general command that works very well for most complex LaTeX documents:</p> <pre><code>pandoc --mathjax --filter pandoc-crossref --toc --citeproc --bibliography \"refs.bib\" --csl \"https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver.csl\" -s \"input.tex\" -o \"output.docx\" -t docx+native_numbering+smart\n</code></pre> <p>And if you build a multi-file document, you can use the following command:</p> <pre><code>pandoc --mathjax --filter pandoc-crossref --toc --citeproc --bibliography \"refs.bib\" --csl \"https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver.csl\" -s \"input.tex\" --resource-path=\"folder1\" --resource-path=\"folder2\" -o \"output.docx\" -t docx+native_numbering+smart\n</code></pre> <p>Where the additions are the <code>--resource-path</code> flags, which tell Pandoc where to look for the additional files.</p> <p>It should be noted that Pandoc does not support all LaTeX packages, specifically TikZ and PGFPlots. If you use these packages, you will need to convert the TikZ code to an image and include it in the document manually. This can be done using the <code>standalone</code> package and the <code>convert</code> option. For example:</p> <pre><code>\\documentclass[convert={density=300,outext=.png}]{standalone}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n    \\draw (0,0) circle (1in);\n\\end{tikzpicture}\n\\end{document}\n</code></pre> <p>Or there are pandoc filters available that can convert TikZ code to images, but these are not as reliable as the standalone method.</p>"},{"location":"conversion.html#citations-styles","title":"Citations styles","text":"<p>Pandoc uses CSL (Citation Style Language) files to format citations and bibliographies. You can find a wide range of styles on the CSL repository. To use a CSL file, you can provide the URL to the file using the <code>--csl</code> flag, as shown in the command above. You can also provide a local file if you have one.</p> <p>Ensure that if you are providing a link to the git repository, you use the raw link to the file, not the HTML page.</p>"},{"location":"conversion.html#tex4ht-and-make4ht","title":"TeX4ht and make4ht","text":"<p>Note</p> <p>make4ht cannot directly convert to docx (word documents), but it can convert to odt (Open Document Text) files, which can be opened in Word.</p> <p>TeX4ht is another LaTeX to HTML converter that can convert LaTeX documents to a wide range of formats, including HTML, XML, and ePub. It is a very powerful tool, but it is not as user-friendly as Pandoc.</p> <p>There is an extension to TeX4ht called <code>make4ht</code> that provides a more user-friendly interface and additional features. It is worth looking into if you are interested in using TeX4ht as it is the current best way to use the tool.</p> <p>Make4ht can natively convert TikZ code to SVG images, which is a big advantage over Pandoc. However, it struggles with image scaling and positioning which requires you to run an additional command to ensure they are correctly placed in the document.</p> <p>The basic command to convert a LaTeX document to odt using make4ht is:</p> <pre><code>make4ht -f odt filename.tex\n</code></pre> <p>Converting more complex documents may require additional options, but the make4ht documentation is very comprehensive and provides a lot of information on how to use the tool.</p>"},{"location":"editors.html","title":"Editors, IDEs, Interfaces, and Tools","text":"<p>Note</p> <p>TLDR: TeXstudio or Overleaf are good choices for LaTeX editing.</p> <p>Note</p> <p>TeXstudio is my personal preference for LaTeX editing.</p> <p>For the purpose of this section all options will be referred to as editors. However, some of the options are  full-fledged IDEs, interfaces, or tools.</p> <p>There are multiple good editor choices available for LaTeX. The choice of editor is a personal preference and the ones listed here are not exhaustive. The editors listed here are popular and have good support for LaTeX.</p>"},{"location":"editors.html#texstudio","title":"TeXstudio","text":"<p>TeXstudio is a fully featured LaTeX editor. It is open source and cross-platform. It has a modern interface built on top of the Qt framework. It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of other features. There is version control available through the use of git and svn although this is not as fully featured/user-friendly as some other editors.</p> <p>It additionally has a built-in viewer for inline preview of equations and images. It has a built-in spell checker and supports multiple languages, as well as local custom package loading.</p> <p>It is a good choice for beginners and advanced users alike offering a highly customizable approach to LaTeX editing.  And simple engine and compiler configuration through the use of magic comments amongst others.</p> <pre><code>% !TeX program = lualatex\n</code></pre> <p></p>"},{"location":"editors.html#overleaf","title":"Overleaf","text":"<p>Overleaf is a cloud-based LaTeX editor. It is a good choice for collaborative work and for those who do not want to install LaTeX on their local machine. It has a modern interface and supports real-time collaboration (paid feature).</p> <p>It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of other features. It has a built-in spell checker and supports multiple languages. It has a built-in version control system and supports multiple file formats. Additionally, it has a built-in template system where thousands of user contributed templates are available. It has limited support for custom packages and some special packages are not supported.</p> <p>It is a good choice for beginners and advanced users alike offering guided and controlled approach to LaTeX editing.</p> <p>However, it is a cloud-based editor and requires an internet connection to use. It has a free tier with limited features and a paid tier with more features. It supports multiple compilers on all tiers, although, if you need a compiler other than pdfLaTeX you will struggle to stay within the free tiers compile time for more complex documents.</p> <p></p>"},{"location":"editors.html#visual-studio-code","title":"Visual Studio Code","text":"<p>Info</p> <p>Visual Studio Code is not a LaTeX editor by default. It requires the  LaTeX Workshop extension  to be installed.</p> <p>Visual Studio Code is a general-purpose code editor. It is open source and cross-platform. It has a modern interface built on top of the Electron framework. It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of addons available through the marketplace.</p> <p>It has LaTeX support through the LaTeX Workshop extension. Which allows VS Code to be a full-fledged LaTeX editor. It has a built-in spell checker and supports multiple languages. It has a support for multiple compilers and engines although the setup can be more complex than other editors. It supports multiple version control systems and has good git support.</p> <p></p>"},{"location":"editors.html#lyx","title":"LyX","text":"<p>LyX is a document processor that is more WYSIWYG than other LaTeX editors essentially being as close to word as you can get with LaTeX. It is open source and cross-platform. It has a modern interface built on top of the Qt framework.</p> <p>It removes the need to write LaTeX code directly and instead allows you to write in a more word processor like manner. Providing a very intuitive interface for beginners and advanced users alike.</p> <p>Although it can be extremely powerful it can also be limiting in some cases where you may require more control, specific packages, or want to use templates from the internet; It tries to handle everything for you and requires specific files to include templates.</p> <p>It abstracts the LaTeX code away from the user and can be a good choice for those who do not want to learn LaTeX but still want to use it.</p> <p></p>"},{"location":"editors.html#texworks","title":"TeXWorks","text":"<p>TeXWorks is a simple LaTeX editor. It is open source and cross-platform and is part of the TeX Live distribution. It has a barebones interface and is good for those who want a simple editor without a lot of features. But lacks some of the comforts of other editors such as code completion and spell checking.</p> <p></p>"},{"location":"editors.html#texifier","title":"TeXifier","text":"<p>TeXifier is a mac/ios specific LaTeX editor that provide real-time preview of the document. It is a good choice for  those who want to remove the hassle of compiling the document to see the changes. It provides modern features like  document trees, syntax highlighting, code completion, and todo lists.</p> <p>It provides LaTeX package management built in and does not require the user to install LaTeX packages manually. However, you are limited to the packages and versions that are available through the app.</p> <p>Lack of user package management can be a limitation for some users. But it remains a good choice for those who want a polished and fully-featured LaTeX editor with no compiling.</p> <p></p>"},{"location":"engines.html","title":"LaTeX Engines/Compilers","text":"<p>Note</p> <p>TLDR: Use pdfLaTeX unless you need specific features that it does not support at which point LuaLaTeX is recommended.</p>"},{"location":"engines.html#how-to-specify-the-latex-compiler","title":"How to specify the LaTeX compiler","text":"<p>LaTeX compilers are specified using magic comments. These are comments that are placed at the beginning of the LaTeX document and are used to specify the compiler that should be used to compile the document. The most common magic comment is:  <pre><code>% !TeX program = lualatex\n</code></pre> Which specifies that the document should be compiled using LuaLaTeX. Other magic comments can be used to specify  different compilers, such as pdfLaTeX or XeLaTeX.</p> <p>For more information on magic comments, please refer to the Magic Comments</p>"},{"location":"engines.html#specificities-of-latex-compilers","title":"Specificities of LaTeX Compilers","text":"<p>As previously discussed on the introduction page, LaTeX is not a standalone typesetting program/new language/or engine,  but rather is a collection of TeX macros that work to improve and make the functionality of TeX more accessible. And were created by Leslie Lamport in the 1980s.</p> <p>When the original TeX code was frozen in the 1980s, it had basic functionality that Knuth thought would be sufficient for most users. However, technology changes alot and so alternative engines were created to improve on the original and support LaTeX. These engines are:</p>"},{"location":"engines.html#pdflatex","title":"pdfLaTeX","text":"<p>This is an extension of TeX that can create PDF directly from TeX source files. It is the  default engine for most LaTeX distributions. PdfLaTeX is the fastest engine available, but it does not support Unicode. or OpenType fonts, which can be a limitation for some users. If you need fonts like Calibri, Arial, or Cambria, you will need to use XeLaTeX or LuaLaTeX.</p>"},{"location":"engines.html#xelatex","title":"XeLaTeX","text":"<p>This is a Unicode-based TeX system that can create PDF directly from TeX source files. It is an  alternative to pdfLaTeX and is used for more complex scripts and fonts. However, it is slower than pdfLaTeX and has not been actively developed since about 2017.</p>"},{"location":"engines.html#lualatex","title":"LuaLaTeX","text":"<p>This is an extended version of pdfLaTeX that can create PDF directly from TeX source files. It  is used for more complex scripts and fonts. LuaLaTeX is the most modern engine available and is actively developed. It is based on Lua, a powerful scripting language that is easy to learn and use. LuaLaTeX is the most flexible engine available and can be used for a wide range of projects. It is the slowest engine to compile but is the most powerful.</p>"},{"location":"engines.html#tectonic","title":"Tectonic","text":"<p>This is a modernized, complete, self-contained TeX/LaTeX engine that is based on XeTeX and TeXLive. It is used for more complex scripts and fonts. It is faster than XeLaTeX and LuaLaTeX and is actively developed. However, it is not as flexible as LuaLaTeX and does not support all the features of LuaLaTeX. It additionally acts as a package manager for LaTeX packages.</p> <p>This list does not include all the engines available, but these are the most commonly used engines for LaTeX. Each  engine has its own strengths and weaknesses, and the best engine for you will depend on your specific needs but general guidance is to remain on pdfLaTeX unless you need specific features that it does not support at which point LuaLaTeX is recommended.</p> <p>For more information on the engines, please refer to the  LaTeX Wikibook or  Overleaf.</p>"},{"location":"engines.html#additional-engine-enhancements","title":"Additional Engine Enhancements","text":"<p>PythonTeX is a LaTeX package that allows you to write and execute Python code in your LaTeX documents.  It is a powerful tool that can be used to create dynamic documents that include data analysis, visualizations, and other computational tasks. PythonTeX is a great way to combine the power of Python with the elegance of LaTeX.</p> <p>Sweave is a tool that allows you to embed R code in your LaTeX documents. It is similar to PythonTeX but is specifically designed for R. </p>"},{"location":"extending-latex.html","title":"Extending LaTeX","text":""},{"location":"extending-latex.html#lua-code-through-lualatex","title":"Lua Code through LuaLaTeX","text":""},{"location":"extending-latex.html#python-code-through-pythontex","title":"Python Code through PythonTeX","text":""},{"location":"installation.html","title":"Installation","text":"<p>Note</p> <p>If you are using Overleaf, you do not need to have a local installation of LaTeX.</p> <p>There are two main ways to install LaTeX on your system:</p> <ol> <li>TeX Live: A comprehensive distribution of LaTeX for Windows, macOS, and Linux.</li> <li>MiKTeX: A distribution of LaTeX for Windows.</li> </ol> <p>Tectonic is also and option but not recommended for beginners.</p> <p>Note</p> <p>TeX Live is recommended for most users.</p> <p>Both distributions provide a package manager to install and update packages. They also provide a GUI for managing the installation. They additionally both provide TeXworks, a simple LaTeX editor which is discussed in more detail in the Editors section.</p>"},{"location":"installation.html#tex-live","title":"TeX Live","text":"<p>TeX Live is a comprehensive distribution of LaTeX for Windows, macOS, and Linux maintained by the TeX Users Group (TUG). It is available for free from the TeX Live website.</p> <p>They provide a detailed installation guide  for all operating systems. And offer a quick installation guide.</p> <p>TeX Live is provided as a single installer for most operating systems and as an  ISO image.</p> <p>Due to the size and volume of packages in modern LaTeX distributions, using the installer can be time-consuming as it downloads all the packages from the internet. The ISO image is recommended for users with slow or unreliable internet.</p> <p>Note</p> <p>The ISO image is a large file (approximately 5.6 GB) but the installation will be quicker as most packages will be installed from the image.</p> <p>Note</p> <p>The installer takes between 30 minutes and 2 hour+ to complete depending on your internet connection and the mirror  quality.</p> <p>Once installed TeX Live has  a package manager called <code>tlmgr</code> (with a gui available) which can be used to install and  update packages.</p> <p>TeX Live is frozen and updated annually and a new version must be installed each year if you want the latest packages.</p> <p>TeX Live often provides the most stable experience for users and is recommended for most users.</p>"},{"location":"installation.html#miktex","title":"MiKTeX","text":"<p>MiKTeX is a distribution of LaTeX for Windows maintained by Christian Schenk. It is available for free from the  MiKTeX website. They provide a detailed installation guide for all operating systems.</p> <p>MiKTeX is provided as a single installer for Windows and as a portable version for USB sticks. The installer is  recommended for most users. The portable version is recommended for users who do not have administrator rights on their computer. The portable version can be installed on a USB stick and run from there.</p> <p>A package manager called <code>mpm</code> which can be used to install and update packages. MiKTeX is updated regularly and packages are updated as needed.</p> <p>MikTeX differs from TeX Live in that it installs packages on the fly as they are needed. This can be useful for users who do not want to download the entire distribution at once. However, it can be slower than TeX Live for users with slow or unreliable internet connections. It can also be less stable than TeX Live as packages are updated more frequently, which can lead to compatibility issues.</p>"},{"location":"magic-coms.html","title":"Magic Comments","text":"<p>Note</p> <p>These should work for most LaTeX editors, but some may have specific requirements or additional options.</p> <p>Magic comments are placed at the beginning of a document and affect how the editor handles the document.</p> <p>This list is not exhaustive, but covers the most common magic comments.</p>"},{"location":"magic-coms.html#compiler-selection","title":"Compiler Selection","text":"<p>The compiler can be selected using:</p> <pre><code>% !TeX program = lualatex\n</code></pre> <p>This will compile the document using LuaLaTeX. Other options include:</p> <ul> <li><code>pdflatex</code></li> <li><code>xelatex</code></li> </ul>"},{"location":"magic-coms.html#encoding","title":"Encoding","text":"<p>Note</p> <p>This is not required for most documents. And LaTeX3 by default uses UTF-8 encoding.</p> <p>The encoding can be selected using:</p> <pre><code>% !TeX encoding = UTF-8\n</code></pre> <p>This will set the encoding to UTF-8. Other options include:</p> <ul> <li><code>latin1</code></li> <li><code>latin9</code></li> <li><code>ascii</code></li> </ul>"},{"location":"magic-coms.html#spell-check","title":"Spell Check","text":"<p>The spell check language can be selected using:</p> <pre><code>% !TeX spellcheck = en_GB\n</code></pre> <p>This will set the spell check language to British English. Other options include:</p> <ul> <li><code>en_US</code></li> <li><code>de_DE</code></li> </ul>"},{"location":"magic-coms.html#tex-root","title":"TeX Root","text":"<p>The root document can be specified using:</p> <pre><code>% !TeX root = main.tex\n</code></pre> <p>This will set the root document to <code>main.tex</code>. This is useful for multi-file documents.</p>"},{"location":"suggested-packages.html","title":"Feats","text":"<p>This is feats.</p>"},{"location":"templates.html","title":"Usage","text":""},{"location":"templates.html#main-window","title":"Main Window","text":"<p>When the software is run, you will be presented with the main window which will look as follows.</p> <p>This window present two paths, four drop-down menus, four tabs, a core count selection, two check boxes, a log window, and a list of links.</p>"},{"location":"thesis.html","title":"Writing a Thesis in LaTeX","text":"<p>You can do it.</p>"},{"location":"tikz.html","title":"Using TikZ/PGF to Create Graphics","text":"<p>TikZ and PGF can produce highly complex code and graphics, but in doing so, they require more time and effort to learn and use effectively. This guide will provide a brief overview of how to use TikZ and PGF to create graphics in LaTeX documents. However, I would strongly recommend reading the following resources for a fantastic guide on how  to use them that will be far more comprehensive than this guide:</p> <ul> <li>Unlocking LaTeX Graphics - Dr Tamara G. Kolda</li> <li>TikZ &amp; PGF Manual</li> <li>Online Manual - Unofficial HTML manual but very helpful</li> </ul> <p>Like in Kolda's guide this page will focus on the most used features of TikZ and PGF and most relevant elements to producing graphics in a report, it will not cover every aspect of TikZ and PGF.</p> <p>There can be some confusion around TikZ and PGF and how they relate to each other. TikZ is a frontend for PGF, which is a lower-level language for producing graphics in LaTeX. TikZ is a more user-friendly interface for PGF, and it is what most people use when creating graphics in LaTeX. However, PGF is more powerful and can be used to create more complex graphics than TikZ. For the purposes of this guide, we will be using TikZ, but it is worth noting that PGF is also available if you need more power. And then there is PGFPlots which is a package built on top of TikZ and PGF that is specifically designed for creating plots and charts.</p> <p>Additionally, while these use to be separate packages, they are now bundled together in the same package, so you only need to include <code>\\usepackage{tikz}</code> in your preamble. But libraries can be loaded with either  <code>\\usetikzlibrary{&lt;library&gt;}</code> or <code>\\usepgflibrary{&lt;library&gt;}</code>.</p> <p>If you want to use PGFPlots, you will need to include <code>\\usepackage{pgfplots}</code> in your preamble.</p> <p>The following will show you how to create graphics using the <code>datavisulization</code> tool and <code>PGFPlots</code>.</p>"},{"location":"tikz.html#getting-data-in-to-tikz","title":"Getting Data in to TikZ","text":"<p>There are a few ways to get data in to TikZ, the most common are:</p> <ul> <li>Hardcoding the data in the TikZ code</li> <li>Using a CSV file</li> <li>Using a data file</li> </ul> <p>The most common method is to hardcode the data in the TikZ code, but this can be cumbersome for large datasets. Using a CSV file is a good alternative, as it allows you to keep the data separate from the code. This can be done using:</p> <p>To read from a file:</p> <pre><code>\\pgfdata[format=table, read from file=&lt;filename.csv&gt;]\n</code></pre> <pre><code>\\datavisualization [\n    scientific axes=clean,\n    x axis={length=3cm, ticks=few},\n    all axes={grid},\n    visualize as smooth line\n    ] \n    data [format=table, read from file=file1.csv];\n</code></pre> <p>Alternatively you can use <code>pgfplotstable</code> and <code>pgfplots</code> packages to read in data from a file:</p> <pre><code>\\usepackage{pgfplots}\n\\usepackage{pgfplotstable}\n\n\\begin{document}\n\n\\pgfplotstableread{&lt;filename.csv&gt;}\\data\n\n\\begin{tikzpicture}\n\\begin{axis}[grid=both]\n\\addplot[smooth] table {\\data};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}\n</code></pre> <p>As you will notice this is a lot more verbose than the datavisualization method. Datavisualization is a newer package and is more user-friendly to most users, it additionally should solve some of the legacy issues with the older <code>pgfplots</code> package. However, <code>pgfplots</code> is still a very powerful package and is still widely used and has a wealth of documentation due to its age while data visualization is still relatively new in the scheme of LaTeX packages.</p> <p>Note</p> <p>PGFPlots has not been updated since 2021. While PGF (which contains Datavisualization) is still actively updated. This is not to say that PGFPlots is not a good package, it is still widely used and has a wealth of documentation available.</p>"},{"location":"tikz.html#scatter-plots","title":"Scatter Plots","text":""},{"location":"tikz.html#line-plots","title":"Line Plots","text":""},{"location":"tikz.html#bar-plots","title":"Bar Plots","text":""},{"location":"tikz.html#pie-charts","title":"Pie Charts","text":""},{"location":"tikz.html#box-plots","title":"Box Plots","text":""},{"location":"tikz.html#heat-maps","title":"Heat Maps","text":""},{"location":"tikz.html#contour-plots","title":"Contour Plots","text":""},{"location":"tikz.html#vector-fields","title":"Vector Fields","text":""},{"location":"tikz.html#3d-plots","title":"3D Plots","text":""},{"location":"tikz.html#math-capabilities","title":"Math Capabilities","text":"<p>PGF has extensive math capabilities, and you can use it to create complex mathematical expressions. This is particularly useful if you need to perform operations on data or create complex mathematical diagrams.</p> <p>For example polynomial approximation can be done with the following code:</p> <pre><code>\\pgfmathveclen{x}{y} \\pgfmathresult\n</code></pre> <p>This is not a replacement for a full programming language, but it can be useful for simple calculations. More information on the math capabilities of PGF can be found in the  TikZ &amp; PGF Manual  under section 94.</p> <p>Note</p> <p>For more comprehensive mathematical operations and manipulations please refer to Extending LaTeX.</p>"},{"location":"tikz.html#tikz-without-the-tikz","title":"TikZ without the TikZ","text":"<p>For those that do not want to learn TikZ, there are a few tools that can be used to create TikZ code without actually writing it. These tools are:</p> <ul> <li>Inkscape</li> <li>Ipe</li> </ul> <p>This guide will not delve in to the specifics of these tools, but they are worth mentioning for those that do not want to learn TikZ. And good guidance is available in their respective documentation.</p>"},{"location":"tikz.html#inkscape","title":"Inkscape","text":"<p>Inkscape is a powerful vector graphics editor that can be used to create TikZ code. This is particularly useful for creating complex graphics that would be difficult to create just writing the code by hand. To allow for TikZ code to be exported from Inkscape, you will need to install the SVG2TikZ extension. This Provides a simple way to convert SVG files and inkscape projects to TikZ code.</p>"},{"location":"tikz.html#ipe","title":"Ipe","text":"<p>Ipe is a powerful graphics editor that incorporates LaTeX. It, like inkscape requires an extension(ipelets) to export TikZ code. The extension is called Ipe2TikZ , although it has been out of development for a while it still works well, there is a more recently active fork available here.</p>"},{"location":"tikz.html#alternatives","title":"Alternatives","text":""},{"location":"tikz.html#latex-picture-environment","title":"LaTeX Picture Environment","text":"<p>The standard LaTeX {picture} environment allows you to create simple graphics, but little more.</p>"},{"location":"tikz.html#pstricks","title":"PSTricks","text":"<p>PSTricks package is powerful enough to create any kind of graphic, but it is not really portable.  It has more limited driver compatibility than TikZ and is not as widely used.</p> <p>Compared to TikZ, PSTricks has a similar support base. There are many nice extra packages for special purpose situations that have been contributed by users over the last decade. The TikZ syntax is more consistent than the pstricks syntax as TikZ was developed \u201cin a more centralized manner\u201d and also \u201cwith the shortcomings on pstricks in mind\u201d.</p>"},{"location":"tikz.html#metapost","title":"METAPOST","text":"<p>METAPOST is a powerful alternative to TikZ. It used to be an external program, which entailed a bunch of problems,  but it is now built in.</p> <p>The main advantage of METAPOST is that it is a programming language, so you can do anything you want with it. The main disadvantage is that it is a programming language, so you have to learn it. </p> <p>More information on it can be found in the METAPOST manual. Or additionally in the METAFUN manual from context and the creator of LuaLaTeX and context Hans Hagen. METAFUN manual</p>"},{"location":"tikz.html#asymptote","title":"Asymptote","text":"<p>Asymptote is a powerful vector graphics language that is particularly well-suited for creating complex graphics. It is similar to METAPOST in that it is a programming language, but it additionally requires a separate program to compile the code.</p>"},{"location":"tikz.html#gnuplot","title":"gnuplot","text":"<p>Gnuplot is a powerful plotting program that can be used to create graphics in LaTeX. It is particularly useful for creating 2D and 3D plots, but it can also be used to create other types of graphics. It is not as powerful as TikZ or PGF, but it is easier to use and can be used to create complex graphics. However, it also requires a separate program.</p>"}]}