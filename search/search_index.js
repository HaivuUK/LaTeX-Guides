var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"A General Purpose Guide for Using LaTeX for Academic Writing  <p> GitHub Contact</p>"},{"location":"index.html#introduction","title":"Introduction","text":"<p>This guide is designed to provide a good starting point for those looking to use LaTeX for academic writing. It is not intended to be a comprehensive guide, but rather a general purpose guide that will provide a good foundation for those looking to use LaTeX for academic writing and the transition from other word processing software.</p> <p>The guide is heavily influenced by the authors experience with LaTeX and the tools that they have found useful. It is intended to be a living document that will be updated as new tools and techniques are discovered. The guide is not intended to be a replacement for the official documentation, but rather a focused companion to it.</p> <p>The sources that helped to create this guide are:</p> <ul> <li>The LaTeX Project</li> <li>Overleaf Documentation</li> <li>Comprehensive TeX Archive Network</li> <li>Unofficial PGFPlots guide</li> </ul> <p>and other sources that will be referenced throughout the guide.</p> <p>Other useful resources include:</p> <ul> <li>Learn LaTeX</li> <li>LaTeX Font Catalogue</li> <li>Not So Short Introduction to LaTeX</li> <li>Not So Short Introduction to LaTeX 2e</li> <li>MLModern - A modern font for LaTeX that is similar to computer modern.</li> <li>NewComputerModern - A modern expanded font for LaTeX that is similar to computer modern.</li> <li>TeXnique - A fun online game to practice writing equations in LaTeX.</li> <li>Detexify - A tool to find the LaTeX command for the symbol you want to write.</li> </ul>"},{"location":"index.html#contact","title":"Contact","text":"<p>If you have any questions, please contact the authors:</p> <p>George H. Allison (Email | LinkedIn)</p>"},{"location":"index.html#feedback-and-development","title":"Feedback and Development","text":"<p>This guide will be actively maintained for the foreseable future. If you have any feedback, please reach out or if the repository has been made public, please raise an issue or open a discussion on the repository.</p> <p>If you would like to contribute to the development of this guide, please reach out to the authors. Contributions are welcome, and the authors will be happy to discuss any changes you would like to make.</p> <p>Once the guide is made open-source Pull requests are welcome.</p>"},{"location":"index.html#references","title":"REFERENCES","text":"<p>1: The LaTeX Project Link</p> <p>2: Overleaf Documentation Link</p> <p>3: Comprehensive TeX Archive Network Link</p> <p>4: Unofficial PGFPlots guide Link</p>"},{"location":"alternatives.html","title":"Alternatives to LaTeX","text":""},{"location":"alternatives.html#markdown","title":"Markdown","text":"<p>Markdown is a lightweight language with plain text formatting syntax. It is designed so that it can be converted to  HTML and many other formats using a tool by the same name. Markdown is often used to format readme files, for writing  messages in online discussion forums, and to create rich text using a plain text editor.</p> <p>It is used in many places, including GitHub, Reddit, and Stack Exchange. It is also used in the documentation for many projects, including this one, or popular note-taking applications like Obsidian.</p> <p>There are multiple flavours of markdown, with GitHub Flavored Markdown (GFM) being the most popular. Each flavour has  its own extensions and limitations.</p> <p>Advantages</p> <ul> <li>Easy to learn</li> <li>Easy to read</li> <li>Easy to write</li> <li>Easy to convert to other formats</li> <li>Can be used in many places</li> <li>Can be used in many tools</li> <li>Supports extensions</li> </ul> <p>Disadvantages</p> <ul> <li>Limited formatting options</li> <li>Limited layout options</li> <li>Limited support for complex documents</li> </ul> <p>An example of a Markdown document:</p> <pre><code># Markdown Example\n\nThis is an example of a markdown document.\n\n## Section 1\n\nThis is the first section.\n\n### Subsection 1\n\nThis is a subsection.\n\nWe can write text with **bold** and *italic* formatting.\n\n- We can also create lists\n- Like this one\n\n1. And numbered lists\n2. Like this one\n\nMath is also supported, like $x^2$. Using LaTeX syntax.\n</code></pre> <p>Although slightly more complex you can also use HTML, CSS, and JavaScript in markdown documents. Or use pandoc to create cross-references.</p> <p>For simple documents, markdown is a great choice and much quicker to get going with than LaTeX. However, for more  complex documents, you may want to consider LaTeX.</p> <p>Using markdown with pandoc can also be a good way to get the best of both worlds. You can write in markdown and then convert to LaTeX or use a LaTeX template for pdf export. Markdown generally converts to word documents well too.</p>"},{"location":"alternatives.html#typst","title":"Typst","text":"<p>Typst is a new language that is designed to be a concise modern alternative to LaTeX. It is designed to be easy to write and read, while still providing similar power to LaTeX. It does not have the same level of complexity as LaTeX, and is available as a web-based editor.</p> <p>However, it does not have the same level of support as LaTeX, and is not as widely used. Although its typesetting  produces similarly nice results to LaTeX.</p> <p>An example of Typst code:</p> <pre><code>#show: elsearticle.with(\n  title: \"Title of the paper\",\n  authors: (\n    (\n      name: \"A. Author\",\n      affiliation: \"University A, City A, Country A\",\n      corr: \"a.author@univa.edu\",\n      id: \"a\",\n    ),\n    (\n      name: \"B. Author\",\n      affiliation: \"University B, City B, Country B\",\n      corr: none,\n      id: \"b\"\n    ),\n    (\n      name: lorem(2),\n      affiliation: none,\n      corr: none,\n      id: \"a\",\n    ),\n    (\n      name: lorem(3),\n      affiliation: none,\n      corr: none,\n      id: \"a\",\n    ),\n    (\n      name: \"A. Author\",\n      affiliation: none,\n      corr: none,\n      id: \"a\",\n    ),\n    (\n      name: \"A. Author\",\n      affiliation: none,\n      corr: none,\n      id: \"a\",\n    ),\n  ),\n  journal: \"Name of the Journal\",\n  abstract: abstract,\n  keywords: (\"keyword 1\", \"keyword 2\"),\n  format: \"review\"\n)\n\n= Introduction\n\n#lorem(100)\n\n= Section 1\n\n#lorem(50)\n\n== Subsection 1\n\n#lorem(10) (see @eq1) @Aut10.\n\n$\ny = a x +b\n$ &lt;eq1&gt;\nwhere ...\n\n== Features\n\n=== Table\n\nBelow is @tab:tab1.\n\n#let tab1 = {\n  table(\n  columns: 3,\n  table.header(\n    [*Header 1*],\n    [*Header 2*],\n    [*Header 3*],\n  ),\n  [Row 1], [12.0], [92.1],\n  [Row 2], [16.6], [104],\n)\n}\n\n#figure(\n    tab1,\n    kind: table,\n    caption : [Example]\n) &lt;tab:tab1&gt;\n\n=== Figures\n\nBelow is @fig:logo.\n\n#figure(\n  image(\"images/typst-logo.svg\", width: 50%),\n  caption : [Typst logo - Credit: \\@fenjalien]\n) &lt;fig:logo&gt;\n\n=== Subfigures\n\nBelow are @figa and @figb, which are part of @fig:typst.\n\n#subfigure(\nfigure(image(\"images/typst-logo.svg\"), caption: []), &lt;figa&gt;,\nfigure(image(\"images/typst-logo.svg\"), caption: []), &lt;figb&gt;,\ncolumns: (1fr, 1fr),\ncaption: [(a) Left image and (b) Right image],\nlabel: &lt;fig:typst&gt;,\n)\n\n#show: appendix\n\n= Appendix A\n\n== Figures\n\nIn @fig:app\n\n#figure(\n  image(\"images/typst-logo.svg\", width: 50%),\n  caption : [Books cover]\n) &lt;fig:app&gt;\n\n== Subfigures\n\nBelow are @figa-app and @figb-app, which are part of @fig:typst-app.\n\n#subfigure(\nfigure(image(\"images/typst-logo.svg\"), caption: []), &lt;figa-app&gt;,\nfigure(image(\"images/typst-logo.svg\"), caption: []), &lt;figb-app&gt;,\ncolumns: (1fr, 1fr),\ncaption: [(a) Left image and (b) Right image],\nlabel: &lt;fig:typst-app&gt;,\n)\n\n== Tables\n\nIn @tab:app\n\n#figure(\n    tab1,\n    kind: table,\n    caption : [Example]\n) &lt;tab:app&gt;\n\n== Equations\n\nIn @eq\n\n$\ny = f(x)\n$ &lt;eq&gt;\n\n#nonumeq[$\n    y = g(x)\n    $\n]\n\n#bibliography(\"refs.bib\")\n</code></pre>"},{"location":"alternatives.html#context","title":"ConTeXt","text":"<p>ConTeXt is another fork of TeX taking a different approach to LaTeX. It is designed to be more consistent but equally flexible to LaTeX. </p> <p>ConTeXt tries to avoid the need to load packages to limit the complexity. And its integration by design with Lua and MetaPost makes it very flexible.</p> <p>It is near identical to LaTeX in typesetting, although they differ slightly. It however is not as widely used as LaTeX.</p> <p>An example of ConTeXt code:</p> <pre><code>\\setuppapersize[A4]\n\n\\setupbodyfont [palatino]\n\n\\definecolor [Top] [h=a5b291]\n\\definecolor [Bottom] [h=b7c1a7]\n\\definecolor [TitleColor] [h=96433a]\n\n\\define[1]\\titlefont{%\n  \\setcharacterkerning[extrakerning]%\n  \\cap\n  \\definedfont[#1]%\n  \\ignorespaces\n}\n\n\\starttext\n\n\\startMPpage\n\n    StartPage ;\n\n    numeric w ; w := bbwidth(Page) ;\n    numeric h ; h := bbheight(Page) ;\n\n    fill (unitsquare xyscaled (w,.8h)) withcolor \\MPcolor{Bottom} ;\n    fill (unitsquare xyscaled (w,.2h) yshifted .8h) withcolor \\MPcolor{Top} ;\n    draw (0,.8h) -- (w,.8h) withpen pensquare scaled 2pt withcolor white ;\n\n    draw textext.rt(\"\\definedfont[Serif at 10pt]G H Allison\") shifted (.1w,.95h) ;\n    draw textext.rt(\"\\titlefont{Serif at 20pt} A ConTeXt Example\") shifted (.1w,.85h) withcolor \\MPcolor{TitleColor} ;\n    draw textext.rt(\"\\titlefont{SerifBold at 10pt} An alternative to LaTeX\") shifted (.1w,.75h) withcolor \\MPcolor{TitleColor} ;\n    draw textext.rt(\"\\titlefont{SerifBold at 10pt} Use google if you want to know more\") shifted (.1w,.70h) ;\n\n\n%    picture p; p := externalfigure \"matterhorn.png\" ;\n%    draw p scaled (w/bbwidth p) ;\n\n    StopPage ;\n\n\\stopMPpage\n\n\\definedfont[Serif at 10pt]\n\n\\section{Section 1}\nThis is the first section.\n\n\\subsection{Subsection 1}\nThis is a subsection.\n\nWe can write text with \\bold{bold} and \\italic{italic} formatting.\n\n\\startitemize\n\\item We can also create lists\n\\item Like this one\n\\stopitemize\n\n{\n\\setupTABLE[framecolor=black]\n\n\\bTABLE\n    \\bTR  \\bTD[row=1,col=1]  1  \\eTD  \\bTD[row=1,col=2]  2  \\eTD  \\bTD[row=1,col=3]  3  \\eTD  \\eTR\n    \\bTR  \\bTD[row=2,col=1]  2  \\eTD  \\bTD[row=2,col=2]  2  \\eTD  \\bTD[row=2,col=3]  2  \\eTD  \\eTR\n    \\bTR  \\bTD[row=3,col=1]  3  \\eTD  \\bTD[row=3,col=2]  2  \\eTD  \\bTD[row=3,col=3]  1  \\eTD  \\eTR\n\\eTABLE}\n\n\n\\stoptext\n</code></pre> <p>The similarity to LaTeX is clear. If you would like to try out ConTeXt, you can use the online editor at ConTeXt on Web.</p>"},{"location":"alternatives.html#ms-word","title":"MS Word","text":"<p>You can use this if you want.</p>"},{"location":"bibliographies.html","title":"Bibliographies","text":"<p>Note</p> <p>TLDR: Zotero is recommended if you are using multiple pieces of software or collaborating with others. JabRef is  recommended if you are just using LaTeX and BibTeX/BibLaTeX.</p>"},{"location":"bibliographies.html#reference-management","title":"Reference Management","text":"<p>Only two tools will be discussed here, as they are the most popular and widely used. Alternatives are available, but I do not have enough experience with them to provide a fair comparison.</p>"},{"location":"bibliographies.html#zotero","title":"Zotero","text":"<p>Note</p> <p>For the best experience, use the Better BibTeX extension.</p> <p>Zotero is a free, open-source, cross-platform reference management software that is available for Windows, macOS, and  Linux. It is a versitle and powerful tool that can be used to manage your references, generate citations, and create  bibliographies. It can also be used to store PDFs, images, and other files related to your research. Additionally, you  can annotate, tag, and make notes on your references.</p> <p>It has a web browser extension that can be used to pull references from web pages easily. It integrates with Microsoft Word, LibreOffice, and Google Docs to make it easy to insert citations and generate bibliographies. It can also generate bibtex files for LaTeX.</p> <p>There are also many plugins available that can extend its functionality, such as the Better BibTeX plugin, which provides better support for BibTeX files.</p> <p>Additionally, Zotero can be used to collaborate with others on research projects. You can share your library with others, and you can also create groups to collaborate on research projects. You can also use the Zotero web library to access your references from any device.</p> <p></p>"},{"location":"bibliographies.html#better-bibtex","title":"Better BibTeX","text":"<p>Better BibTeX is a Zotero plugin that provides better support for BibTeX files. It can be used to export your Zotero library to a BibTeX file, and it can also be used to import BibTeX files into Zotero. It provides better handling of special characters, better support for custom fields, and better support for LaTeX-specific fields as well as live updates of your Bib file as you make changes in Zotero.</p> <p>Settings to be aware of when using Better BibTeX:</p> <ul> <li>Citation Key Format: This setting allows you to specify how the citation keys are generated. The default is   <code>authoryear</code>, which generates keys in the format <code>AuthorYear</code>. You can also use <code>authoryear-ibid</code>, which generates   keys in the format <code>AuthorYeara</code>, <code>AuthorYearb</code>, etc. You can also use custom formats, such as <code>authoryear:lower</code>,   which generates keys in the format <code>authoryear</code>, but in lowercase.</li> </ul> <p>Citation Keys are used to refer to a specific reference in your LaTeX document. You want to make them unique and memorable, so you can easily refer to them in your document. For example, if you have a reference to a paper by Allison in 2024, you might use the key <code>allison2024</code> to refer to it.</p> <p>Calling this in latex would look like this:</p> <pre><code>\\usepackage[backend=biber,style=authoryear]{biblatex}\n\\addbibresource{references.bib}\n\n\\begin{document}\n    Some text from \\cite{allison2024} that's it.\n\\end{document}\n</code></pre> <ul> <li>Export Unicode as plain-text latex commands: This setting allows you to specify whether special characters should  be exported as plain-text LaTeX commands or as Unicode characters. For most case you should have this on as it can cause  issues with some LaTeX compilers (pdfLaTeX does not support Unicode, it will generally be fine in LuaLaTeX and XeLaTeX).</li> </ul>"},{"location":"bibliographies.html#jabref","title":"JabRef","text":"<p>JabRef is a free, open-source reference management software that is available for Windows, macOS, and Linux. It is a powerful tool that can be used to manage your references, generate citations, and create bibliographies. It can also be used to store PDFs, images, and other files related to your research. Additionally, you can annotate, tag, and make notes on your references. Although not as slick as Zotero, it is still a very powerful tool.</p> <p>JabRef is built around the BibTeX and BibLaTeX formats thus making it ideal for LaTeX users. It also comes with a web browser extension that can be used to pull references from web pages easily. Paper search and retrieval are also  available in JabRef. As well as paper linking, which allows you to look for similar papers to the one you are currently viewing without leaving the software.</p> <p>You can also view journal impact factors, and other metrics, directly from the software.</p> <p>However, JabRef does not have the same level of integration with word processors as Zotero does, only supporting LibreOffice directly. It can still be used with Microsoft Word and Google Docs, but it requires a bit more manual work.</p> <p></p>"},{"location":"bibliographies.html#bibtex-vs-biblatex-biber-vs-natbib","title":"BibTeX vs BibLaTeX &amp; biber vs natbib","text":"<p>Note</p> <p>BibLaTeX and Biber are the recommended tools for LaTeX users. They are more modern and flexible than BibTeX and natbib, and they provide better support for non-English languages, custom fields, and complex bibliographies.</p> <p>BibTeX is the original bibliography management software for LaTeX. It is still widely used today, but it has some limitations that have been addressed by BibLaTeX. BibLaTeX is a more modern and flexible alternative to BibTeX that provides better support for non-English languages, better support for custom fields, and better support for complex bibliographies. It also provides better support for Unicode characters, which can be useful if you are working with non-English languages.</p> <p>Natbib provides better support for citations and bibliographies in LaTeX. It provides better support for author-year citations, numerical citations, and other citation styles. It also provides better support for citations with multiple authors, multiple works by the same author, and other complex citation styles. It also provides better support for custom citation styles, allowing you to easily create your own citation styles.</p> <p>BibLaTeX also provides better support for citation styles, allowing you to easily switch between different citation styles without having to change your bibliography file. It also provides better support for multiple bibliographies, allowing you to easily create separate bibliographies for different sections of your document.</p> <p>Biber is a more modern alternative to BibTeX that provides the backend to BibLaTeX. It provides better support for  Unicode characters, better support for custom fields, and better support for complex bibliographies. It also provides better support for sorting and filtering your bibliography, allowing you to easily find and organize your references.</p>"},{"location":"bibliographies.html#references-in-latex","title":"References in LaTeX","text":"<p>Note</p> <p>This will only discuss the modern method of using BibLaTeX and biber, and the current best available packages.  For the older method of using BibTeX and natbib, please refer to the  Overleaf documentation.</p> <p>To use BibLaTeX and biber in your LaTeX document, you will need to include the following code in your preamble:</p> <pre><code>\\usepackage[backend=biber,style=authoryear]{biblatex}\n\\addbibresource{references.bib}\n\\AtEndDocument{\\printbibliography}\n</code></pre> <p><code>\\AtEndDocument{\\printbibliography}</code> will print the bibliography at the end of the document. You can also use <code>\\printbibliography</code> to print the bibliography at a specific location in your document.</p> <p>You can also use the <code>\\cite</code> command to cite a reference in your document. For example, <code>\\cite{key}</code> will cite the reference with the key <code>key</code> in your bibliography.</p> <p>There are multiple citation commands available in BibLaTeX, such as <code>\\textcite</code>, <code>\\parencite</code>, <code>\\footcite</code>, and <code>\\autocite</code>. These commands provide different citation styles, such as author-year citations, numerical citations, and other citation styles.</p> <p>You can also use the <code>\\nocite</code> command to include a reference in your bibliography without citing it in your document. For example, <code>\\nocite{*}</code> will include all references in your bibliography without citing them in your document.</p> <p>Other styles can be used by changing the <code>style</code> option in the <code>\\usepackage</code> command. For example, <code>style=numeric</code> will use numerical citations, <code>style=alphabetic</code> will use author-year citations, and <code>style=authoryear</code> will use author-year citations. There are standard group styles available, such as <code>style=ieee</code>, <code>style=apa</code>, <code>style=mla</code>, and <code>style=chicago</code>.</p> <p>LaTeX will automatically generate the bibliography for you when you compile your document. You do not need to manually format the bibliography or the citations, as LaTeX will do this for you.</p>"},{"location":"bibliographies.html#hyperref","title":"hyperref","text":"<p>hyperref provides better support for hyperlinks in your document, allowing you to easily navigate between sections,  figures, tables, and other elements in your document. It also provides better support for URLs, allowing you to easily link to web pages, PDFs, and other online resources. It is a requirement for many other referencing packages.</p> <p>To use hyperref in your LaTeX document, you will need to include the following code in your preamble:</p> <pre><code>\\usepackage{hyperref}\n</code></pre>"},{"location":"code-display.html","title":"Code Display","text":"<p>The <code>minted</code> package is a popular choice for code display in LaTeX. It uses the Python package <code>Pygments</code> to  highlight code. To use <code>minted</code>, you need to have a Python distribution installed on your system. TeX Live will handle additional installations that are required. If you are using MikTeX more information can be found on the Minted CTAN Page.</p> <p>Note</p> <p>From version 3 of <code>minted</code>, shell escape is no longer required.</p> <p>Note</p> <p>Minted supports a wide range of languages, including Python, C++, Java, and many more. For a full list of supported languages, please refer to the Pygments documentation. Only Python will be  demonstrated here.</p>"},{"location":"code-display.html#using-minted-on-a-code-block","title":"Using minted on a code block","text":"<pre><code>\\documentclass{article}\n\n\\usepackage{minted}\n\\usepackage{xcolor}\n\\usepackage[margin={2.5cm,2.5cm}]{geometry}\n\\definecolor{code-bg}{RGB}{29, 35, 49}\n\\setminted{autogobble,breaklines,breakanywhere,python3}\n\n\\begin{document}\n    \\begin{minted}{python}\n        import pandas as pd\n        import matplotlib.pyplot as plt\n        import numpy as np\n\n        # Define the file path\n        file_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n        # Read the Excel file\n        # df = pd.read_csv(file_path)\n        df = pd.read_excel(file_path)\n\n        # Prepare data for box plot\n        # Transpose the DataFrame to have landmarks as columns and cases as rows\n        df_transposed = df.transpose()\n        # The first row now contains the landmarks, set it as header\n        df_transposed.columns = df_transposed.iloc[0]\n        # Drop the first row as it's now set as the header\n        df_transposed = df_transposed.drop(df_transposed.index[0])\n\n        # Convert all columns to numeric types, errors='coerce' will set non-convertible values to NaN\n        df_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n        # Plot the box plot\n        boxplot = df_transposed.boxplot()\n        plt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n        # Customize the plot\n        plt.title('Displacement Distribution')\n        plt.xlabel('Landmark')\n        plt.ylabel('Displacement')\n\n        # Display the plot\n        plt.tight_layout()\n        plt.show()\n    \\end{minted}\n\\end{document}\n</code></pre> <p>Which would produce the following output:</p> <pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the file path\nfile_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n# Read the Excel file\n# df = pd.read_csv(file_path)\ndf = pd.read_excel(file_path)\n\n# Prepare data for box plot\n# Transpose the DataFrame to have landmarks as columns and cases as rows\ndf_transposed = df.transpose()\n# The first row now contains the landmarks, set it as header\ndf_transposed.columns = df_transposed.iloc[0]\n# Drop the first row as it's now set as the header\ndf_transposed = df_transposed.drop(df_transposed.index[0])\n\n# Convert all columns to numeric types, errors='coerce' will set non-convertible values to NaN\ndf_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n# Plot the box plot\nboxplot = df_transposed.boxplot()\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n# Customize the plot\nplt.title('Displacement Distribution')\nplt.xlabel('Landmark')\nplt.ylabel('Displacement')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"code-display.html#using-minted-on-python-file","title":"Using minted on python file","text":"<p><pre><code>\\inputminted{python}{path/to/your/file.py}\n</code></pre> Which would produce the same output as above.</p>"},{"location":"code-display.html#inline-code","title":"Inline code","text":"<p>To use <code>minted</code> for inline code, you can use the <code>\\mintinline</code> command. For example:</p> <pre><code>\\mintinline{python}{import pandas as pd}\n</code></pre>"},{"location":"code-display.html#customisation","title":"Customisation","text":"<p>There is a lot of customisation that can be done with <code>minted</code>. For more information, please refer to the  documentation and Pygments style documentation.</p>"},{"location":"code-display.html#using-minted-with-tcolorbox","title":"Using <code>minted</code> with <code>tcolorbox</code>","text":"<p>You can use <code>minted</code> with <code>tcolorbox</code> to create a box around your code. For example:</p> <p>This requires the <code>tcolorbox</code> package to be installed and called.</p> <pre><code>\\usepackage{tcolorbox}\n\\tcbuselibrary{minted}\n</code></pre> <p>Then you can use the following code:</p> <pre><code>\\begin{tcblisting}{listing only, minted language=python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the file path\nfile_path = r'C:\\Users\\YourName\\Data.xlsx'\n\n# Read the Excel file\n# df = pd.read_csv(file_path)\ndf = pd.read_excel(file_path)\n\n# Prepare data\n# Transpose the DataFrame to have landmarks as columns and cases as rows\ndf_transposed = df.transpose()\n# The first row now contains the landmarks, set it as header\ndf_transposed.columns = df_transposed.iloc[0]\n# Drop the first row as it's now set\ndf_transposed = df_transposed.drop(df_transposed.index[0])\n\n# Convert all columns to numeric types, errors='coerce' will set non-convertible\ndf_transposed = df_transposed.apply(pd.to_numeric, errors='coerce')\n\n# Plot the\nboxplot = df_transposed.boxplot()\nplt.xticks(rotation=45)  # Rotate x-axis labels for better readability\n\n# Customize the plot\nplt.title('Displacement Distribution')\nplt.xlabel('Landmark')\nplt.ylabel('Displacement')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n\\end{tcblisting}\n</code></pre> <p>Which would produce the following output:</p> <p></p>"},{"location":"collaboration.html","title":"Collaboration","text":"<p>In LaTeX collaboration is not normally at the forefront of the workflow. However, it is possible to do in a few ways. The main options are a Version Control System (VCS) like Git, a cloud-based LaTeX editor like Overleaf, or a more general collaboration plugin for an editor like Atom or Visual Studio Code.</p> <p>Note</p> <p>More than basic collaboration in Overleaf is a paid for feature.</p>"},{"location":"collaboration.html#version-control-systems","title":"Version Control Systems","text":"<p>Version Control Systems (VCS) are a way to track changes to files over time. They are commonly used in software  development to track changes to code, but can also be used for LaTeX documents (which are essentially code).  The most popular VCS is Git, which is free and open source. Git is a distributed VCS, which means that each user has a full copy of the repository on their local machine. This makes it easy to work offline and to collaborate with others. However, you can also use a centralised Git repository, like GitHub, GitLab, or Bitbucket, to collaborate with others.</p> <p>It is recommended to keep separate branches when working on a LaTeX document with others. This way, you can work on different parts of the document without interfering with each other. When you are ready to merge your changes, you can create a pull request, which allows others to review your changes before they are merged into the main branch.</p> <p>Git integrates well with nearly all LaTeX editors such as TeXstudio and Visual Studio Code. You can also use Git from the command line or a GUI client like Sourcetree or GitHub Desktop.</p> <p>For more information to get started with Git, see the following resources:</p> <ul> <li>official documentation</li> <li>GitHub's Git Handbook </li> <li>Pro Git book</li> <li>Learning Git Branching</li> <li>Visual Guide to Version Control</li> </ul>"},{"location":"collaboration.html#visual-studio-code-live-share","title":"Visual Studio Code Live Share","text":"<p>This is a plugin for Visual Studio Code that allows you to collaborate with others in real-time. It is free and open source, and works with any programming language, including LaTeX. It has features like real-time editing, debugging, and text chat. This arguably provide the best real-time collaboration experience for LaTeX documents as it in most cases does not require any specific changes to pre-existing workflows.</p> <p>Visual Studio Code Live Share</p> <p>Live Share Info</p> <p>The main downside to this is that it requires a session to be started and maintained, which could be a problem if you want to work on the document offline or flexibly. It is always best to use a tool like Git in conjunction with this.</p>"},{"location":"collaboration.html#overleaf","title":"Overleaf","text":"<p>Note</p> <p>Overleaf limits collaboration features on free accounts to one collaborator and no real-time track changes.</p> <p>Overleaf provides a combination of real-time collaboration and version control in a single paid service.</p> <p>Overleaf allows you to collaborate with others in real-time. It has a built-in version control system, so you can see  who made changes to the document and when in addition to leaving comments. Overleaf integrates reasonably well with Git if you want a further backup of your document but has some known limitations such as not being able to branch.</p> <p>For more information on Overleaf, see the following resources:</p> <ul> <li>official documentation</li> <li>Overleaf's Git integration</li> </ul>"},{"location":"conversion.html","title":"Conversion","text":"<p>Occasionally, you may need to convert a LaTeX document to a different format. There are a few tools and ways to do this, but the most common are:</p> <ul> <li>Pandoc</li> <li>TeX4ht</li> <li>PDF to Word converters</li> </ul> <p>Note</p> <p>As documents become more complex, the conversion process becomes more difficult. This is especially true for  documents that use a lot of custom packages or custom commands. In these cases, you may need to do some manual  editing after the conversion. It is often easier to convert the PDF to the desired format or convince the recipient  to accept the PDF/TeX.</p>"},{"location":"conversion.html#pdf-to-word-converters","title":"PDF to Word Converters","text":"<p>This is the quick and dirty method of converting a LaTeX document to a Word document. It is not perfect, and you will likely need to do some manual editing afterward, but it is a good starting point if you need a one-off conversion.</p> <p>There are a few PDF to Word converters available, but the most popular and widely used is Adobe Acrobat Pro. This is a paid software, but it is the most reliable and accurate I have used to date. It does offer a free alternative through a web interface, but this is more limited.</p> <p>Adobe PDF to Word Converter</p> <p>MS Word (and other word processor alternatives: OpenOffice, LibreOffice, WPS Office) also has a built-in PDF to Word  converter, but it is not as accurate as Adobe's. It is free, however, so it is worth trying if you do not have access  to Adobe Acrobat Pro. You can find this feature under the <code>File</code> menu, then <code>Open</code>, and select the PDF file you want  to convert. The accuracy of this tool is highly dependent on the complexity of the document, so you may need to do  some manual editing afterward.</p>"},{"location":"conversion.html#pandoc","title":"Pandoc","text":"<p>Pandoc is a universal document converter that can convert between a wide range of formats. It is a command-line tool, so it is not as user-friendly as some other tools, but it is very powerful and flexible. It can convert between LaTeX, Word, HTML, Markdown, and many other formats.</p> <p>Using it can be as simple as running the following command:</p> <pre><code>pandoc input.tex -o output.docx\n</code></pre> <p>Where the document becomes more complex, you may need to provide additional options to get the desired output. The Pandoc documentation is very comprehensive and provides a lot of information on how to use the tool. However, here is a general command that works very well for most complex LaTeX documents:</p> <pre><code>pandoc --mathjax --filter pandoc-crossref --toc --citeproc --bibliography \"refs.bib\" --csl \"https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver.csl\" -s \"input.tex\" -o \"output.docx\" -t docx+native_numbering+smart\n</code></pre> <p>And if you build a multi-file document, you can use the following command:</p> <pre><code>pandoc --mathjax --filter pandoc-crossref --toc --citeproc --bibliography \"refs.bib\" --csl \"https://raw.githubusercontent.com/citation-style-language/styles/master/vancouver.csl\" -s \"input.tex\" --resource-path=\"folder1\" --resource-path=\"folder2\" -o \"output.docx\" -t docx+native_numbering+smart\n</code></pre> <p>Where the additions are the <code>--resource-path</code> flags, which tell Pandoc where to look for the additional files.</p> <p>It should be noted that Pandoc does not support all LaTeX packages, specifically TikZ and PGFPlots. If you use these packages, you will need to convert the TikZ code to an image and include it in the document manually. This can be done using the <code>standalone</code> package and the <code>convert</code> option. For example:</p> <pre><code>\\documentclass[convert={density=300,outext=.png}]{standalone}\n\\usepackage{tikz}\n\\begin{document}\n\\begin{tikzpicture}\n    \\draw (0,0) circle (1in);\n\\end{tikzpicture}\n\\end{document}\n</code></pre> <p>Or there are pandoc filters available that can convert TikZ code to images, but these are not as reliable as the standalone method.</p>"},{"location":"conversion.html#citations-styles","title":"Citations styles","text":"<p>Pandoc uses CSL (Citation Style Language) files to format citations and bibliographies. You can find a wide range of styles on the CSL repository. To use a CSL file, you can provide the URL to the file using the <code>--csl</code> flag, as shown in the command above. You can also provide a local file if you have one.</p> <p>Ensure that if you are providing a link to the git repository, you use the raw link to the file, not the HTML page.</p>"},{"location":"conversion.html#tex4ht-and-make4ht","title":"TeX4ht and make4ht","text":"<p>Note</p> <p>make4ht cannot directly convert to docx (word documents), but it can convert to odt (Open Document Text) files, which can be opened in Word.</p> <p>TeX4ht is another LaTeX to HTML converter that can convert LaTeX documents to a wide range of formats, including HTML, XML, and ePub. It is a very powerful tool, but it is not as user-friendly as Pandoc.</p> <p>There is an extension to TeX4ht called <code>make4ht</code> that provides a more user-friendly interface and additional features. It is worth looking into if you are interested in using TeX4ht as it is the current best way to use the tool.</p> <p>Make4ht can natively convert TikZ code to SVG images, which is a big advantage over Pandoc. However, it struggles with image scaling and positioning which requires you to run an additional command to ensure they are correctly placed in the document.</p> <p>The basic command to convert a LaTeX document to odt using make4ht is:</p> <pre><code>make4ht -f odt filename.tex\n</code></pre> <p>Converting more complex documents may require additional options, but the make4ht documentation is very comprehensive and provides a lot of information on how to use the tool.</p>"},{"location":"crossref.html","title":"Cross-referencing","text":"<p>Note</p> <p>It is recommended to use all these packages together to get the best cross-referencing experience in LaTeX.</p>"},{"location":"crossref.html#zref","title":"zref","text":"<p>zref provides flexible and extensible cross-referencing capabilities in LaTeX. It allows you to create custom labels  and references, and provides better support for complex cross-referencing in your document. It also provides better  support for custom reference styles, allowing you to easily create your own reference styles. It provides the base  for two more advanced packages, <code>zref-xr</code> and <code>zref-clever</code>.</p>"},{"location":"crossref.html#zref-xr","title":"zref-xr","text":"<p>zref-xr provides better support for cross-referencing between multiple documents. It allows you to easily reference labels in other documents, and provides better support for complex cross-referencing between multiple documents. This is fundamental for creating complex documents with multiple parts, chapters, or sections that need to reference each other.</p> <p>To set up cross document cross-referencing it is recommended to create a document list file that contains the paths to the documents you want to cross-reference. The code to include in your document is as follows:</p> <pre><code>\\ProvidesPackage{doc-list}\n\n\\RequirePackage{zref-xr}\n\\RequirePackage{hyperref}\n\n\\zexternaldocument{chapter1}\n\\zexternaldocument{chapter2}\n\\zexternaldocument{section1}\n\\zexternaldocument{appendix}\n\\zexternaldocument{conclusion}\n\\zexternaldocument{chapter3}\n</code></pre> <p>In this example, the <code>doc-list</code> package is created to include the documents you want to cross-reference. The <code>\\zexternaldocument</code> command is used to include the paths to the documents you want to cross-reference. This file would need to be saved as <code>doc-list.sty</code> and included in all your documents that you want to cross-reference.</p>"},{"location":"crossref.html#zref-clever","title":"zref-clever","text":"<p>zref-clever provides better support for clever cross-referencing in LaTeX. It allows you to easily reference labels with additional information, such as the page number, section number, or chapter number. This allows you to keep your cross-references consistent and informative, and removes the need to manually think about the formatting of your cross-references.</p> <p>To use zref-clever, you need to include the following code in your preamble:</p> <pre><code>\\usepackage{zref-clever}\n</code></pre> <p>This will load the zref-clever package and provide you with the additional cross-referencing capabilities it offers.</p> <p>You will then be able to use the <code>\\zcref</code> command to reference labels with additional information. For example, <code>\\zcref{label}</code> will reference the label with the page number, section number, or chapter number, depending on the context of the reference. If you need to capitalize the reference you can use <code>\\zcref[S]{label}</code>.</p>"},{"location":"crossref.html#calling-cross-references","title":"Calling cross-references","text":"<p>To be able to cross-reference back to an item you need to have a label on the item you want to reference. When using <code>zref</code> you can use the <code>\\zlabel</code> command to create a label. For example:</p> <pre><code>\\begin{figure}\n    \\centering\n    \\includegraphics{example.png}\n    \\caption{An example image}\n    \\zlabel{fig:example}\n\\end{figure}\n\nAs seen in Figure \\zcref{fig:example}, this is an example image.\n</code></pre> <p>In this example, the <code>\\zlabel</code> command is used to create a label for the figure. The <code>\\zcref</code> command is then used to reference the label in the text. This will automatically insert the correct reference information, in this case it would insert \\(\\text{Figure 1}\\) into the text.</p> <p>It is generally good practice to use a consistent naming convention for your labels to make it easier to remember and reference them. For example, using <code>fig:</code> for figures, <code>tab:</code> for tables, <code>sec:</code> for sections, <code>ch:</code> for chapters,  <code>eq:</code> for equations, etc.</p>"},{"location":"ctan.html","title":"Compreshensive TeX Archive Network (CTAN)","text":"<p>CTAN is the primary source for TeX packages. This is where all the files in your TeX distribution come and where  documentation for all the packages can be found. The website is located at ctan.org.</p>"},{"location":"ctan.html#searching-for-packages","title":"Searching for Packages","text":"<p>The search bar on the CTAN website is the primary way to find packages. You can search by package name, author, or description. The search results will show the package name, description, and the last update date.</p> <p>They are additionally sorted by categories and topics.</p>"},{"location":"custom-commands.html","title":"Custom Commands","text":"<p>Sometimes in LaTeX there is not a package that does exactly what you want, or you want to make a specific action repeatable. In these cases, you can define your own commands. This is done using the <code>\\newcommand</code> command or the <code>\\newenvironment</code> command. </p> <p>When defining new commands or environments you will want to add in <code>\\makeatletter</code> and <code>\\makeatother</code> to allow for the use of <code>@</code> and other special characters in the command. This is done as follows:</p> <pre><code>\\makeatletter\n% Define new commands here\n\\makeatother\n</code></pre>"},{"location":"custom-commands.html#new-commands","title":"New Commands","text":"<p>The syntax for <code>\\newcommand</code> is:</p> <pre><code>\\newcommand{\\commandname}[num]{definition}\n</code></pre> <p>where <code>\\commandname</code> is the name of the command, <code>num</code> is the number of arguments the command takes (up to 9), and <code>definition</code> is what the command does. For example, if you wanted to define a command that bolds text, you could use:</p> <pre><code>\\newcommand{\\bold}[1]{\\textbf{#1}}\n</code></pre> <p>This would allow you to use <code>\\bold{some text}</code> to bold the text \"some text\". If you wanted to define a command that takes two arguments, you could use:</p> <pre><code>\\newcommand{\\add}[2]{#1 + #2}\n</code></pre> <p>This would allow you to use <code>\\add{2}{3}</code> to get \"2 + 3\".</p> <p>These are simple examples, but you can define more complex commands. For example, you could define a command that creates a new section with a label and a reference:</p> <pre><code>\\newcommand{\\newsection}[2]{\\section{#1}\\label{#2}\\ref{#2}}\n</code></pre> <p>This would allow you to use <code>\\newsection{Introduction}{sec:intro}</code> to create a new section titled \"Introduction\" with the label \"sec:intro\" and a reference to it.</p> <p>A particularly useful command may be extending the roman numeral command to be more inline with your needs. For example:</p> <pre><code>\\newcommand{\\Rom}[1]{\\textrm{\\MakeUppercase{\\romannumeral #1}}}\n\\newcommand{\\rom}[1]{\\textrm{\\romannumeral #1}}\n\\newcommand{\\Romit}[1]{\\textit{\\textrm{\\MakeUppercase{\\romannumeral #1}}}}\n\\newcommand{\\romit}[1]{\\textit{\\textrm{\\romannumeral #1}}}\n</code></pre> <p>This would allow you to use <code>\\Rom{1}</code> to get \"I\", <code>\\rom{1}</code> to get \"i\", <code>\\Romit{1}</code> to get \"I\", and  <code>\\romit{1}</code> to get \"i\".</p> <p>However, you may find it impractical to define a new command for each case here, in this case you can define a command with optional arguments instead. This is done by using the following syntax:</p> <pre><code>\\newcommand{\\roms}[2][n]{%\n    \\if S#1 \\textrm{\\MakeUppercase{\\romannumeral #2}}%\n    \\else \\if I#1 \\textit{\\textrm{\\MakeUppercase{\\romannumeral #2}}}%\n    \\else \\if i#1 \\textit{\\textrm{\\romannumeral #2}}%\n    \\else \\textrm{\\romannumeral #2}%\n    \\fi \\fi \\fi\n}\n</code></pre> <p>This would allow you to use <code>\\roms{1}</code> to get \"i\", <code>\\roms[I]{1}</code> to get \"I\", <code>\\roms[i]{1}</code> to get \"i\", and <code>\\roms[S]{1}</code> to get \"I\".</p>"},{"location":"custom-commands.html#new-environments","title":"New Environments","text":"<p>The syntax for <code>\\newenvironment</code> is:</p> <pre><code>\\newenvironment{name}[num]{before}{after}\n</code></pre> <p>where <code>name</code> is the name of the environment, <code>num</code> is the number of arguments the environment takes (up to 9), <code>before</code> is what happens before the environment, and <code>after</code> is what happens after the environment. For example, if you wanted to define an environment that bolds text, you could use:</p> <pre><code>\\newenvironment{boldenv}{\\textbf\\bgroup}{\\egroup}\n</code></pre> <p>This would allow you to use:</p> <pre><code>\\begin{boldenv}\nsome text\n\\end{boldenv}\n</code></pre> <p>This gives you large levels of control over your documents and gives you the ability to create tools to make your time writing LaTeX easier.</p>"},{"location":"custom-commands.html#additional-notes","title":"Additional Notes","text":"<ul> <li>When defining new commands or environments, you should be careful not to overwrite existing commands or environments.</li> <li>You can use <code>\\renewcommand</code> to redefine an existing command.</li> <li>You can use <code>\\providecommand</code> to define a command only if it does not already exist.</li> <li>You can use <code>\\newcommand*</code> to define a command that does not allow for paragraph breaks in its arguments.</li> <li>You can use <code>\\newenvironment*</code> to define an environment that does not allow for paragraph breaks in its contents.</li> </ul> <p>You may want to save your custom commands in a separate file like a <code>.sty</code> file and include it in your main document, if this is stored in your <code>texmf</code> directory you can use it in any document you write and call it as a package.</p>"},{"location":"custom-packages.html","title":"Custom Packages","text":"<p>TeX makes it easy to create custom packages. Custom packages can be anything from a simple collection of commands, document templates/themes, or even a full-fledged package that provides a new functionality.</p>"},{"location":"custom-packages.html#creating-a-custom-package","title":"Creating a Custom Package","text":"<p>To create a custom package, you need to create a <code>.sty</code> file. The <code>.sty</code> file is a LaTeX package file that contains commands and environments that you want to use in your document.</p> <p>Here is an example of a simple custom package that defines a new command <code>\\hello</code>:</p> <pre><code>% hello.sty\n\\ProvidesPackage{hello}\n\\newcommand{\\hello}{Hello, World!}\n</code></pre> <p>To use the custom package in your document, you need to load it using the <code>\\usepackage</code> command:</p> <pre><code>\\documentclass{article}\n\n\\usepackage{hello}\n\n\\begin{document}\n\n\\hello\n\n\\end{document}\n</code></pre>"},{"location":"custom-packages.html#installing-a-custom-package","title":"Installing a Custom Package","text":"<p>Note</p> <p>If you plan to use the custom package in multiple documents, it is recommended to install the package in your TeX <code>texmf</code> directory.</p> <p>To install a custom package, you can place the <code>.sty</code> file in the same directory as your document, or you can install it in your TeX distribution so that it is available to all your documents.</p> <p>For custom packages it is generally recommended to install them in your user <code>texmf</code> directory. This directory is usually located at <code>~/texmf/tex/latex/</code> on Unix-like systems and <code>C:\\Users\\&lt;username&gt;\\texmf\\tex\\latex\\</code> on Windows.</p> <p>After placing the <code>.sty</code> file in your <code>texmf</code> directory, you can begin using the package in your documents immediately.</p>"},{"location":"custom-packages.html#sharing-a-custom-package","title":"Sharing a Custom Package","text":"<p>If you want to share your custom package with others, you can create a <code>.zip</code> file containing the <code>.sty</code> file and any other necessary files (such as documentation) and distribute it to others.</p> <p>You can also upload your custom package to a public repository like CTAN (Comprehensive TeX Archive Network) so that others can find and use it easily.</p>"},{"location":"editors.html","title":"Editors, IDEs, Interfaces, and Tools","text":"<p>Note</p> <p>TLDR: TeXstudio or Overleaf are good choices for LaTeX editing.</p> <p>Note</p> <p>TeXstudio is my personal preference for LaTeX editing.</p> <p>For the purpose of this section all options will be referred to as editors. However, some of the options are  full-fledged IDEs, interfaces, or tools.</p> <p>There are multiple good editor choices available for LaTeX. The choice of editor is a personal preference and the ones listed here are not exhaustive. The editors listed here are popular and have good support for LaTeX.</p>"},{"location":"editors.html#texstudio","title":"TeXstudio","text":"<p>TeXstudio is a fully featured LaTeX editor. It is open source and cross-platform. It has a modern interface built on top of the Qt framework. It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of other features. There is version control available through the use of git and svn although this is not as fully featured/user-friendly as some other editors.</p> <p>It additionally has a built-in viewer for inline preview of equations and images. It has a built-in spell checker and supports multiple languages, as well as local custom package loading.</p> <p>It is a good choice for beginners and advanced users alike offering a highly customizable approach to LaTeX editing.  And simple engine and compiler configuration through the use of magic comments amongst others.</p> <pre><code>% !TeX program = lualatex\n</code></pre> <p></p>"},{"location":"editors.html#overleaf","title":"Overleaf","text":"<p>Overleaf is a cloud-based LaTeX editor. It is a good choice for collaborative work and for those who do not want to install LaTeX on their local machine. It has a modern interface and supports real-time collaboration (paid feature).</p> <p>It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of other features. It has a built-in spell checker and supports multiple languages. It has a built-in version control system and supports multiple file formats. Additionally, it has a built-in template system where thousands of user contributed templates are available. It has limited support for custom packages and some special packages are not supported.</p> <p>It is a good choice for beginners and advanced users alike offering guided and controlled approach to LaTeX editing.</p> <p>However, it is a cloud-based editor and requires an internet connection to use. It has a free tier with limited features and a paid tier with more features. It supports multiple compilers on all tiers, although, if you need a compiler other than pdfLaTeX you will struggle to stay within the free tiers compile time for more complex documents.</p> <p></p>"},{"location":"editors.html#visual-studio-code","title":"Visual Studio Code","text":"<p>Info</p> <p>Visual Studio Code is not a LaTeX editor by default. It requires the  LaTeX Workshop extension  to be installed.</p> <p>Visual Studio Code is a general-purpose code editor. It is open source and cross-platform. It has a modern interface built on top of the Electron framework. It has a built-in PDF viewer, syntax highlighting, code completion, and a lot of addons available through the marketplace.</p> <p>It has LaTeX support through the LaTeX Workshop extension. Which allows VS Code to be a full-fledged LaTeX editor. It has a built-in spell checker and supports multiple languages. It has a support for multiple compilers and engines although the setup can be more complex than other editors. It supports multiple version control systems and has good git support.</p> <p></p>"},{"location":"editors.html#lyx","title":"LyX","text":"<p>LyX is a document processor that is more WYSIWYG than other LaTeX editors essentially being as close to word as you can get with LaTeX. It is open source and cross-platform. It has a modern interface built on top of the Qt framework.</p> <p>It removes the need to write LaTeX code directly and instead allows you to write in a more word processor like manner. Providing a very intuitive interface for beginners and advanced users alike.</p> <p>Although it can be extremely powerful it can also be limiting in some cases where you may require more control, specific packages, or want to use templates from the internet; It tries to handle everything for you and requires specific files to include templates.</p> <p>It abstracts the LaTeX code away from the user and can be a good choice for those who do not want to learn LaTeX but still want to use it.</p> <p></p>"},{"location":"editors.html#texworks","title":"TeXWorks","text":"<p>TeXWorks is a simple LaTeX editor. It is open source and cross-platform and is part of the TeX Live distribution. It has a barebones interface and is good for those who want a simple editor without a lot of features. But lacks some of the comforts of other editors such as code completion and spell checking.</p> <p></p>"},{"location":"editors.html#texifier","title":"TeXifier","text":"<p>TeXifier is a mac/ios specific LaTeX editor that provide real-time preview of the document. It is a good choice for  those who want to remove the hassle of compiling the document to see the changes. It provides modern features like  document trees, syntax highlighting, code completion, and todo lists.</p> <p>It provides LaTeX package management built in and does not require the user to install LaTeX packages manually. However, you are limited to the packages and versions that are available through the app.</p> <p>Lack of user package management can be a limitation for some users. But it remains a good choice for those who want a polished and fully-featured LaTeX editor with no compiling.</p> <p></p>"},{"location":"engines.html","title":"LaTeX Engines/Compilers","text":"<p>Note</p> <p>TLDR: Use pdfLaTeX unless you need specific features that it does not support at which point LuaLaTeX is recommended.</p>"},{"location":"engines.html#how-to-specify-the-latex-compiler","title":"How to specify the LaTeX compiler","text":"<p>LaTeX compilers are specified using magic comments. These are comments that are placed at the beginning of the LaTeX document and are used to specify the compiler that should be used to compile the document. The most common magic comment is:  <pre><code>% !TeX program = lualatex\n</code></pre> Which specifies that the document should be compiled using LuaLaTeX. Other magic comments can be used to specify  different compilers, such as pdfLaTeX or XeLaTeX.</p> <p>For more information on magic comments, please refer to the Magic Comments</p>"},{"location":"engines.html#specificities-of-latex-compilers","title":"Specificities of LaTeX Compilers","text":"<p>As previously discussed on the introduction page, LaTeX is not a standalone typesetting program/new language/or engine,  but rather is a collection of TeX macros that work to improve and make the functionality of TeX more accessible. And were created by Leslie Lamport in the 1980s.</p> <p>When the original TeX code was frozen in the 1980s, it had basic functionality that Knuth thought would be sufficient for most users. However, technology changes alot and so alternative engines were created to improve on the original and support LaTeX. These engines are:</p>"},{"location":"engines.html#pdflatex","title":"pdfLaTeX","text":"<p>This is an extension of TeX that can create PDF directly from TeX source files. It is the  default engine for most LaTeX distributions. PdfLaTeX is the fastest engine available, but it does not support Unicode. or OpenType fonts, which can be a limitation for some users. If you need fonts like Calibri, Arial, or Cambria, you will need to use XeLaTeX or LuaLaTeX.</p>"},{"location":"engines.html#xelatex","title":"XeLaTeX","text":"<p>This is a Unicode-based TeX system that can create PDF directly from TeX source files. It is an  alternative to pdfLaTeX and is used for more complex scripts and fonts. However, it is slower than pdfLaTeX and has not been actively developed since about 2017.</p>"},{"location":"engines.html#lualatex","title":"LuaLaTeX","text":"<p>This is an extended version of pdfLaTeX that can create PDF directly from TeX source files. It  is used for more complex scripts and fonts. LuaLaTeX is the most modern engine available and is actively developed. It is based on Lua, a powerful scripting language that is easy to learn and use. LuaLaTeX is the most flexible engine available and can be used for a wide range of projects. It is the slowest engine to compile but is the most powerful.</p>"},{"location":"engines.html#tectonic","title":"Tectonic","text":"<p>This is a modernized, complete, self-contained TeX/LaTeX engine that is based on XeTeX and TeXLive. It is used for more complex scripts and fonts. It is faster than XeLaTeX and LuaLaTeX and is actively developed. However, it is not as flexible as LuaLaTeX and does not support all the features of LuaLaTeX. It additionally acts as a package manager for LaTeX packages.</p> <p>This list does not include all the engines available, but these are the most commonly used engines for LaTeX. Each  engine has its own strengths and weaknesses, and the best engine for you will depend on your specific needs but general guidance is to remain on pdfLaTeX unless you need specific features that it does not support at which point LuaLaTeX is recommended.</p> <p>For more information on the engines, please refer to the  LaTeX Wikibook or  Overleaf.</p>"},{"location":"engines.html#additional-engine-enhancements","title":"Additional Engine Enhancements","text":"<p>PythonTeX is a LaTeX package that allows you to write and execute Python code in your LaTeX documents.  It is a powerful tool that can be used to create dynamic documents that include data analysis, visualizations, and other computational tasks. PythonTeX is a great way to combine the power of Python with the elegance of LaTeX.</p> <p>Sweave is a tool that allows you to embed R code in your LaTeX documents. It is similar to PythonTeX but is specifically designed for R. </p>"},{"location":"equations.html","title":"Equations/Maths/Formulae","text":"<p>Not</p> <p>LaTeX Equations do not break across pages. If you have a long equation that needs to break across pages, you can use the <code>breqn</code> package. This package will automatically break equations across pages. To use the <code>breqn</code> package, you can add the following line to the preamble of your document: <pre><code>\\usepackage{breqn}\n</code></pre></p> <p>Writing equations is one of the most powerful features of LaTeX.  It is one of the main reasons that people use LaTeX for academic writing and one of its largest advantages over processors like word.  This section will cover the basics of writing equations in LaTeX and some particular cases.</p> <p>For most mathematical writing, you will want to use the <code>amsmath</code> package. This package provides a number of useful tools for writing equations and is the most commonly used package for writing equations in LaTeX. To use the <code>amsmath</code> package, you can add the following line to the preamble of your document:</p> <pre><code>\\usepackage{amsmath}\n</code></pre> <p>If you want to write matrices, you can use the <code>amsmath</code> package with the <code>amssymb</code> package. The <code>amssymb</code> package provides a number of useful symbols for writing equations. To use the <code>amssymb</code> package, you can add the following line to the preamble of your document:</p> <pre><code>\\usepackage{amssymb}\n</code></pre> <p>If you want to write piecewise functions, you can use the <code>cases</code> package. The <code>cases</code> package provides the <code>numcases</code> environments for writing piecewise functions. To use the <code>cases</code> package, you can add the following line to the preamble of your document:</p> <pre><code>\\usepackage{cases}\n</code></pre>"},{"location":"equations.html#basic-syntax","title":"Basic Syntax","text":"<p>The basic syntax for writing equations in LaTeX is to use the <code>$</code> symbol to denote the start and end of the maths environment. For example, to write the equation \\(E = mc^2\\) you would write:</p> <pre><code>$E = mc^2$\n</code></pre> <p>This will produce the following equation:</p> \\[ E = mc^2 \\] <p>If you want to write an equation that is displayed on its own line, you can use the <code>\\[</code> and <code>\\]</code> symbols. For example, to write the equation \\(E = mc^2\\) on its own line you would write:</p> <pre><code>\\[\n    E = mc^2\n\\]\n</code></pre> <p>To make particular elements of maths please refer to the following table:</p> Element Syntax Example Output Subscript <code>_</code> <code>x_1</code> \\(x_1\\) Superscript <code>^</code> <code>x^2</code> \\(x^2\\) Fraction <code>\\frac{numerator}{denominator}</code> <code>\\frac{1}{2}</code> \\(\\frac{1}{2}\\) Square Root <code>\\sqrt{expression}</code> <code>\\sqrt{2}</code> \\(\\sqrt{2}\\) Root <code>\\sqrt[n]{expression}</code> <code>\\sqrt[3]{2}</code> \\(\\sqrt[3]{2}\\) Summation <code>\\sum_{start}^{end}</code> <code>\\sum_{i=1}^{n}</code> \\(\\sum_{i=1}^{n}\\) Product <code>\\prod_{start}^{end}</code> <code>\\prod_{i=1}^{n}</code> \\(\\prod_{i=1}^{n}\\) Integral <code>\\int_{start}^{end}</code> <code>\\int_{0}^{1}</code> \\(\\int_{0}^{1}\\) Contour Integral <code>\\oint_{start}^{end}</code> <code>\\oint_{0}^{1}</code> \\(\\oint_{0}^{1}\\) Limit <code>\\lim_{x \\to a}</code> <code>\\lim_{x \\to 0}</code> \\(\\lim_{x \\to 0}\\) Matrix <code>\\begin{matrix} ... \\end{matrix}</code> <code>\\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{matrix}</code> \\(\\begin{matrix} 1 &amp; 2 \\\\ 3 &amp; 4 \\end{matrix}\\) Cases <code>\\begin{cases} ... \\end{cases}</code> <code>\\begin{cases} 1 &amp; x &gt; 0 \\\\ 0 &amp; x = 0 \\\\ -1 &amp; x &lt; 0 \\end{cases}</code> \\(\\begin{cases} 1 &amp; x &gt; 0 \\\\ 0 &amp; x = 0 \\\\ -1 &amp; x &lt; 0 \\end{cases}\\) Binomial Coefficient <code>\\binom{n}{k}</code> <code>\\binom{n}{k}</code> \\(\\binom{n}{k}\\) Derivative <code>\\frac{d}{dx}</code> <code>\\frac{d}{dx}</code> \\(\\frac{d}{dx}\\) Partial Derivative <code>\\frac{\\partial}{\\partial x}</code> <code>\\frac{\\partial}{\\partial x}</code> \\(\\frac{\\partial}{\\partial x}\\) Vector <code>\\vec{v}</code> <code>\\vec{v}</code> \\(\\vec{v}\\) Bold Symbol <code>\\mathbf{v}</code> <code>\\mathbf{v}</code> \\(\\mathbf{v}\\) Variable Bracket <code>\\left( ... \\right)</code> <code>\\left( \\frac{1}{2} \\right)</code> \\(\\left( \\frac{1}{2} \\right)\\) Variable Curly Bracket <code>\\left\\{ ... \\right\\}</code> <code>\\left\\{ \\frac{1}{2} \\right\\}</code> \\(\\left\\{ \\frac{1}{2} \\right\\}\\) Variable Square Bracket <code>\\left[ ... \\right]</code> <code>\\left[ \\frac{1}{2} \\right]</code> \\(\\left[ \\frac{1}{2} \\right]\\) Variable Angle Bracket <code>\\left\\langle ... \\right\\rangle</code> <code>\\left\\langle \\frac{1}{2} \\right\\rangle</code> \\(\\left\\langle \\frac{1}{2} \\right\\rangle\\) Variable Single Vertical Bar <code>\\left\\| ... \\right\\|</code> <code>\\left\\| \\frac{1}{2} \\right\\|</code> \\(\\left\\lvert \\frac{1}{2} \\right\\rvert\\) Variable Double Vertical Bar <code>\\left\\\\| ... \\right\\\\|</code> <code>\\left\\\\| \\frac{1}{2} \\right\\\\|</code> \\(\\left\\| \\frac{1}{2} \\right\\|\\) Variable Floor <code>\\left\\lfloor ... \\right\\rfloor</code> <code>\\left\\lfloor \\frac{1}{2} \\right\\rfloor</code> \\(\\left\\lfloor \\frac{1}{2} \\right\\rfloor\\) Variable Ceiling <code>\\left\\lceil ... \\right\\rceil</code> <code>\\left\\lceil \\frac{1}{2} \\right\\rceil</code> \\(\\left\\lceil \\frac{1}{2} \\right\\rceil\\) <p>For more information on writing equations in LaTeX, please refer to the  Overleaf documentation.</p> <p>If you want to practice writing equations in LaTeX, you can use the fun online game TeXnique. And if there is something you want to write but you are not sure how to do it, you can use the  Detexify tool to find the LaTeX command for the symbol you want to write.</p>"},{"location":"equations.html#basic-equations","title":"Basic Equations","text":"<p>The most basic way to write an equation in LaTeX is to use the <code>equation</code> environment. This will automatically number the equation and place it in the centre of the page. Here is an example:</p> <pre><code>\\begin{equation}\n    E = mc^2\n\\end{equation}\n</code></pre> <p>This will produce the following equation:</p> \\[ E = mc^2 \\tag{1} \\] <p>If you want to write an equation without a number, you can use the <code>equation*</code> environment.</p>"},{"location":"equations.html#multi-line-equations","title":"Multi-line Equations","text":"<p>If you want to write a multi-line equation, you can use the <code>align</code> environment. This will align the equations at the <code>&amp;</code> symbol. Here is an example:</p> <pre><code>\\begin{align}\n    E &amp;= mc^2 \\\\\n    F &amp;= ma\n\\end{align}\n</code></pre> <p>This will produce the following equations:</p> \\[ \\begin{align}     E &amp;= mc^2 \\tag{2} \\\\     F &amp;= ma \\tag{3} \\end{align} \\] <p>You can place the <code>&amp;</code> symbol at different points in the equation to align the equations at that point. And if you do not want numbers you can use the <code>align*</code> environment to write multi-line equations without numbers. </p>"},{"location":"equations.html#matrices","title":"Matrices","text":"<p>If you want to write a matrix, you can use the <code>bmatrix</code> environment. Here is an example:</p> <pre><code>\\[\n    \\begin{bmatrix}\n        1 &amp; 2 \\\\\n        3 &amp; 4\n    \\end{bmatrix}\n\\]\n</code></pre> <p>This will produce the following matrix:</p> \\[ \\begin{bmatrix}     1 &amp; 2 \\\\     3 &amp; 4 \\end{bmatrix} \\] <p>You can use the <code>pmatrix</code>, <code>vmatrix</code>, <code>Vmatrix</code>, <code>Bmatrix</code>, and <code>smallmatrix</code> environments to write different types  of matrices.</p>"},{"location":"equations.html#cases","title":"Cases","text":"<p>If you want to write a piecewise function, you can use the <code>cases</code> environment. Here is an example:</p> <pre><code>\\[\n    f(x) = \n    \\begin{cases}\n        1 &amp; x &gt; 0 \\\\\n        0 &amp; x = 0 \\\\\n        -1 &amp; x &lt; 0\n    \\end{cases}\n\\]\n</code></pre> <p>This will produce the following piecewise function:</p> \\[ f(x) = \\begin{cases}\\tag{1}     1 &amp; x &gt; 0 \\\\     0 &amp; x = 0 \\\\     -1 &amp; x &lt; 0 \\end{cases} \\] <p>Some time you will want to write a piecewise function with a single equation number. To do this you can use the <code>numcases</code> environment from the <code>cases</code> package. Here is an example:</p> <pre><code>\\begin{numcases}{f(x)}\n    1 &amp; $x &gt; 0$ \\\\\n    0 &amp; $x = 0$ \\\\\n    -1 &amp; $x &lt; 0$\n\\end{numcases}\n</code></pre> <p>This will produce the following piecewise function with a single equation number:</p> \\[ \\require{amsmath} \\require{cases} \\begin{numcases}{f(x)}     1 &amp; x &gt; 0 \\tag{1} \\\\     0 &amp; x = 0 \\tag{2} \\\\     -1 &amp; x &lt; 0 \\tag{3} \\end{numcases} \\] <p>When you are using cases with complex equations you may find the equation gets too small to read. In this case you can use the <code>dcases</code> environment from the <code>mathtools</code> package. This will make the equations larger and easier to read. Here is an example:</p> <pre><code>f(x) = \n\\begin{dcases}\n    \\frac{1}{x} &amp; x \\neq 0 \\\\\n    \\frac{1}{\\frac{1-3}{x}+3.313} &amp; x \\neq 0 \\\\\n    0 &amp; x = 0\n\\end{dcases}\n</code></pre> <p>This will produce the following piecewise function:</p> \\[ \\require{amsmath} \\require{mathtools} f(x) = \\begin{dcases}     \\frac{1}{x} &amp; x \\neq 0 \\\\     \\frac{1}{\\frac{1-3}{x}+3.313} &amp; x \\neq 0 \\\\     0 &amp; x = 0 \\end{dcases} \\]"},{"location":"equations.html#greek-and-special-characters","title":"Greek and Special Characters","text":"<p>To write Greek letters and special characters in LaTeX, you can use the following syntax:</p> <pre><code>\\alpha \\beta \\gamma \\delta \\epsilon \\varepsilon \\zeta \\eta \\theta \\vartheta \\iota \\kappa \\lambda \\mu \\nu \\xi \\pi \n\n\\Gamma \\Delta \\Theta \\Lambda \\Xi \\Pi \\Sigma \\Upsilon \\Phi \\Psi \\Omega\n\n\\infty \\partial \\hbar \\imath \\jmath \\ell \\Re \\Im \\wp \\aleph \\forall \\exists \\neg \\flat \\natural \\sharp \\backslash \n</code></pre> <p>This will produce the following Greek letters and special characters:</p> \\[ \\begin{align} &amp;\\alpha \\beta \\gamma \\delta \\epsilon \\varepsilon \\zeta \\eta \\theta \\vartheta \\iota \\kappa \\lambda \\mu \\nu \\xi \\pi \\\\ &amp;\\Gamma \\Delta \\Theta \\Lambda \\Xi \\Pi \\Sigma \\Upsilon \\Phi \\Psi \\Omega \\\\ &amp;\\infty \\partial \\hbar \\imath \\jmath \\ell \\Re \\Im \\wp \\aleph \\forall \\exists \\neg \\flat \\natural \\sharp \\backslash \\end{align} \\] <p>This is just a small selection of the Greek letters and special characters that you can write in LaTeX. For a full list of Greek letters and special characters, please refer to the LaTeX WikiBook.</p>"},{"location":"extending-latex.html","title":"Extending LaTeX","text":""},{"location":"extending-latex.html#lua-code-through-lualatex","title":"Lua Code through LuaLaTeX","text":"<p>Note</p> <p>I recommend not using the <code>luacode</code> package. Use the <code>directlua</code> command instead as shown below.</p> <p>LuaLaTeX is a LaTeX engine that allows you to run Lua code in your LaTeX document. Lua is a powerful scripting language that is easy to learn and use (somewhat similar to python). LuaLaTeX is included in most LaTeX distributions and does  not require any additional installation.</p> <p>To use LuaLaTeX, you need use LuaLaTeX instead of pdfLaTeX, enable it though a magic comment.  For example:</p> <pre><code>% !TeX program = lualatex\n</code></pre> <p>Then you can use Lua code in your LaTeX document. For example:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n    \\directlua{\n        local x = 5\n        local y = 10\n        tex.print(x + y)\n    }\n\\end{document}\n</code></pre> <p>This would print \\(15\\) in the LaTeX document as if it were written in LaTeX.</p> <p>LuaLaTeX can be used for a variety of tasks such as generating tables, plots, and other LaTeX code. As LuaLaTeX is moving to be the standard LaTeX engine certain packages may require LuaLaTeX to work properly.</p> <p>And example of using LuaLaTeX to generate a table is shown below:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n    \\directlua{\n        tex.print(\"\\\\begin{tabular}{|c|c|c|}\")\n        tex.print(\"\\\\hline\")\n        tex.print(\"1 &amp; 2 &amp; 3 \\\\\\\\\")\n        tex.print(\"\\\\hline\")\n        tex.print(\"4 &amp; 5 &amp; 6 \\\\\\\\\")\n        tex.print(\"\\\\hline\")\n        tex.print(\"7 &amp; 8 &amp; 9 \\\\\\\\\")\n        tex.print(\"\\\\hline\")\n        tex.print(\"\\\\end{tabular}\")\n    }\n\\end{document}\n</code></pre> <p>This would print the following table in the LaTeX document as if it were written in LaTeX.</p> \\[ \\begin{array}{|c|c|c|}     \\hline     1 &amp; 2 &amp; 3 \\\\     \\hline     4 &amp; 5 &amp; 6 \\\\     \\hline      7 &amp; 8 &amp; 9 \\\\     \\hline \\end{array} \\] <p>LuaLaTeX can additionally be used for plotting through the luaplot package or using it to pass variables back. It uses metapost to generate the plots. See an example of using <code>luaplot</code> below:</p> <pre><code>\\documentclass{article}\n\n\\usepackage{luaplot}\n\n\\begin{document}\n    \\luaplot[\n    xmin=-10,\n    xmax=20,\n    plotpts=300,\n    hor='6cm',\n    ver='5cm',\n    clr={'red; blue'},\n    plotsty={'dashed evenly'},\n    plotoptions={\n        [[\n        autogrid(grid.bot,grid.lft) withcolor .85white;\n        glabel(btex ${sin(x)+x}$ etex,(7,11.5)) withcolor (0,1,0);\n        glabel(btex ${cos(x)}$ etex,(12,2)) withcolor (0,1,0);\n        ]]\n    }\n    ]\n    {sin(x)+x,cos(x)}\n\\end{document}\n</code></pre> <p>Which produces the following plot:</p> <p></p>"},{"location":"extending-latex.html#basic-lua-stats","title":"Basic Lua Stats","text":"<p>LuaLaTeX can be used to generate basic statistics. For example, the following code will generate the mean, median, mode, and standard deviation of a list of numbers.</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\n\\directlua{\n    function mean(t)\n        local sum = 0\n        for i = 1, #t do\n            sum = sum + t[i]\n        end\n        return sum / #t\n    end\n\n    function median(t)\n        table.sort(t)\n        if #t % 2 == 0 then\n            return (t[#t / 2] + t[#t / 2 + 1]) / 2\n        else\n            return t[math.ceil(#t / 2)]\n        end\n    end\n\n    function mode(t)\n        local counts = {}\n        for i = 1, #t do\n            if counts[t[i]] == nil then\n                counts[t[i]] = 1\n            else\n                counts[t[i]] = counts[t[i]] + 1\n            end\n        end\n        local max = 0\n        local mode = nil\n        for k, v in pairs(counts) do\n            if v &gt; max then\n                max = v\n                mode = k\n            end\n        end\n        return mode\n    end\n\n    function std(t)\n        local m = mean(t)\n        local sum = 0\n        for i = 1, #t do\n            sum = sum + (t[i] - m)^2\n        end\n        return math.sqrt(sum / #t)\n    end\n\n    local t = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    tex.print(\"Mean: \" .. mean(t) .. \"\\string\\\\par\")\n    tex.print(\"Median: \" .. median(t) .. \"\\string\\\\par\")\n    tex.print(\"Mode: \" .. mode(t) .. \"\\string\\\\par\")\n    tex.print(\"Standard Deviation: \" .. std(t) .. \"\\string\\\\par\")\n}\n\\end{document}\n</code></pre> <p>Occasionally you may run in to issues with closing <code>}</code> in the lua code. Here it can be better to save the code as a <code>*.lua</code> file and input it into the document. Or use the <code>luacode</code> package.</p>"},{"location":"extending-latex.html#lua-math-calculations","title":"Lua Math Calculations","text":"<p>As already shown in the basic stats example, Lua can be used to perform math calculations. However, it can be a bit of  a hassle to code each function you may ever want to use in Lua. Instead, you can use the <code>luacas</code> package to make math calculations easier. It comes with a variety of functions that can be used to perform math calculations.</p> <p>For example, the following code will perform evaluation on an expression of an equation using the <code>luacas</code> package.</p> <pre><code>\\documentclass{article}\n\n\\usepackage{luacas}\n\n\\begin{document}\n\n    \\begin{CAS}\n        vars('x')\n        y = diff(x^2+x,x)+diff(2*x,x)\n        y = y:evaluate()\n        y = y:autosimplify()\n    \\end{CAS}\n    \\[ y = \\print{y} \\]\n\n    \\begin{CAS}\n        vars('x', 'y')\n        z = diff(x^2+x*2*y^2,x)\n        z = z:evaluate()\n        z = z:autosimplify()\n    \\end{CAS}\n    \\[ z = \\print{z} \\]\n\n\\end{document}\n</code></pre> <p>This would print the following in the LaTeX document as if it were written in LaTeX.</p> \\[ y = 3 + 2x \\] \\[ z = 2x + 2y^2 \\] <p>You may still need to make your own functions for more complex calculations, that the <code>luacas</code> package does not cover.</p>"},{"location":"extending-latex.html#python-code-through-pythontex","title":"Python Code through PythonTeX","text":"<p>Note</p> <p>PythonTeX does not require you to use -shell-escape.</p> <p>PythonTeX requires a Python installation and the <code>pythontex</code> package. The package can be installed through the  package manager of your LaTeX distribution or manually from CTAN. </p> <p>Once the package is installed you need to add the following to your build instructions for your document:</p> <pre><code>pythontex %.tex\n</code></pre> <p>So your build instructions might look like this:</p> <pre><code>pdflatex %.tex | pythontex %.tex | pdflatex %.tex | view-pdf %.pdf\n</code></pre> <p>or in TeXstudio would put the following in the user command:</p> <p>name: <code>pythontex:pythontex</code></p> <p>command:  <pre><code>pythontex %.tex\n</code></pre></p> <p>then you can run your build command as:</p> <pre><code>txs:///compile | txs:///pythontex | txs:///compile | txs:///view-pdf\n</code></pre> <p>Now you can use Python code in your LaTeX document. For example:</p> <pre><code>\\documentclass{article}\n\n\\usepackage[gobble=auto]{pythontex}\n\\begin{document}\n    \\begin{pycode}\n        import numpy as np\n        x = np.linspace(0, 2*np.pi, 100)\n        y = np.sin(x)\n        print(f'y={y[1]} and x={x[43]}')\n    \\end{pycode}\n\\end{document}\n</code></pre> <p>Note</p> <p>I recommend using the <code>gobble=auto</code> option in the <code>pythontex</code> package. This will handle your indentation for you.</p> <p>This would print the value of <code>y</code> at index 1 and <code>x</code> at index 43. in the LaTeX document as if it were written in LaTeX.</p> <p>It would look like this in the output:</p> \\[ y=0.0634239196565645 \\text{ and } x=2.729060284936588 \\] <p>There is generally no limit to the Python code you can run in your LaTeX document. You can even use PythonTeX to generate tables, plots, and other LaTeX code. However, be aware that PythonTeX has not been updated in a while and may have some stability issues.</p> <p>PythonTeX can additionally be use for plotting like shown in PGF Graphics in Python. However, you still need to input the <code>pgf</code> file after the PythonTeX code.</p> <p>For example:</p> <pre><code>\\documentclass{article}\n\n\\usepackage[gobble=auto]{pythontex}\n\n\\begin{document}\n    \\begin{pycode}\n        import matplotlib.pyplot as plt\n        import numpy as np\n        x = np.linspace(0, 2*np.pi, 100)\n        y = np.sin(x)\n        plt.plot(x, y)\n        plt.savefig('plot.pgf')\n    \\end{pycode}\n    \\begin{figure}\n        \\centering\n        \\input{plot.pgf}\n    \\end{figure}\n\\end{document}\n</code></pre>"},{"location":"extending-latex.html#using-numerica-for-math-calculations","title":"Using Numerica for Math Calculations","text":"<p>Numerica is a package that allows you to perform math calculations in LaTeX. It offer a non LuaTeX alternative to performing math calculations in LaTeX. It is not as powerful as PythonTeX but it is a good alternative.</p> <p>Numerica is included in most LaTeX distributions and does not require any additional installation. To use Numerica, you need to include the package in your LaTeX document. For example:</p> <pre><code>\\usepackage{numerica}\n</code></pre> <p>Then you can use Numerica code in your LaTeX document. For example:</p> <pre><code>\\documentclass{article}\n\n\\usepackage{amssymb}\n\n\\begin{document}\n    \\begin{align}\n        x &amp;= 5 \\\\\n        y &amp;= 10 \\\\\n        z &amp;= x^2 \\times 4y \\\\\n        \\therefore z &amp;= \\eval*{x^2 * 4y}[x=5,y=10]\n    \\end{align}\n\\end{document}\n</code></pre> <p>This would print the value of \\(z\\) in the LaTeX document as if it were written in LaTeX.</p> <p>It would look like this in the output:</p> \\[ \\begin{align}     x &amp;= 5 \\\\     y &amp;= 10 \\\\     z &amp;= x^2 \\times 4y \\\\     \\therefore z &amp;= 1000 \\end{align} \\] <p>Numerica will also work inline, for example:</p> <pre><code>\\eval{$x^2 \\times 4y$}[x=5,y=10] \n</code></pre> <p>Displaying the following: \\(x^2 \\times 4y = 1000\\) \\((x=5,y=10)\\).</p> <p>Note</p> <p>You can use the <code>env=$</code> option instead to make the output inline. But can confuse your editor's syntax highlighting  until you start a new line. However, it should not cause any other issues.</p> <p>For more information on Numerica and its full capabilities see the documentation.</p>"},{"location":"figures.html","title":"Figures in LaTeX","text":"<p>Figures are generally easy to handle in LaTeX, a standard <code>figure</code> float will handle the majority of cases. </p> <p>However, complexity can arise when you want to start adding sub-figures,  or having figures side-by-side. This document will cover the basics of adding figures to your LaTeX document, as well  as how to add sub-figures and have multiple figures side-by-side. Or maybe you have a single image file that has multiple sub-figures in it, and you want them to be referenced separately.</p>"},{"location":"figures.html#basic-figure","title":"Basic Figure","text":"<p>Note</p> <p>If you want to load an included image, you need to use the <code>graphicx</code> package. You can include this package in your document by adding the following line to your preamble: <pre><code>\\usepackage{graphicx}\n</code></pre></p> <p>Note</p> <p>The <code>graphicx</code> package does not support all image formats. The main format it supports are <code>.pdf</code>, <code>.eps</code>, <code>.png</code>,  and <code>.jpg</code>. It does not support <code>.svg</code> files.</p>"},{"location":"figures.html#graphicx-example","title":"Graphicx Example","text":"<p>The basic figure is simple, you can use the following code to add an existing image in a figure environment  to your document:</p> <pre><code>\\begin{figure}[h]\n    \\centering\n    \\includegraphics[width=0.5\\textwidth]{path/to/image}\n    \\caption{This is the caption of the figure}\n    \\zlabel{fig:figure1}\n\\end{figure}\n</code></pre> <p>This will add a figure to your document, with the image centered and the caption below the image. The <code>width</code> parameter of the <code>includegraphics</code> command can be adjusted to change the size of the image. The <code>zlabel</code> command is used to  reference the figure in the text.</p> <p>The <code>\\textwidth</code> command reads the size of the text field between the margins, so <code>0.5\\textwidth</code> will make the image half the width of the text field.</p>"},{"location":"figures.html#tikz-and-tex-figures","title":"TikZ and TeX Figures","text":"<p>When making figures in tikz or import a tex file sizing can be a bit more difficult. A solution to this is to use <code>resizebox</code> which is provided by the <code>graphicx</code> package and can be extended with the <code>adjustbox</code> package if required.  For example:</p> <pre><code>\\begin{figure}[h]\n    \\centering\n    \\resizebox{0.5\\textwidth}{!}{\n        \\begin{tikzpicture}\n            \\draw (0,0) -- (1,1);\n        \\end{tikzpicture}\n    }\n    \\caption{This is the caption of the figure}\n    \\zlabel{fig:figure1}\n\\end{figure}\n</code></pre> <p>This will make the tikz picture half the width of the text field. The <code>!</code> in the <code>resizebox</code> command will keep the  aspect ratio of the image. You can switch the <code>!</code> with the width field to make the image a sized based on height.</p>"},{"location":"figures.html#tikz-example","title":"TikZ Example","text":"<p>If you wanted to include a tikz picture you would place your tikz code inside the <code>figure</code> environment. For example:</p> <pre><code>\\begin{figure}[h]\n    \\centering\n    \\begin{tikzpicture}\n        \\draw (0,0) -- (1,1);\n    \\end{tikzpicture}\n    \\caption{This is the caption of the figure}\n    \\zlabel{fig:figure1}\n\\end{figure}\n</code></pre>"},{"location":"figures.html#tex-example","title":"TeX Example","text":"<p>And if you wanted to input a <code>tex</code> file you would use the <code>input</code> command. For example if you had written your tikz figure in a separate file:</p> <pre><code>\\begin{figure}[h]\n    \\centering\n    \\input{path/to/tex/file}\n    \\caption{This is the caption of the figure}\n    \\zlabel{fig:figure1}\n\\end{figure}\n</code></pre>"},{"location":"figures.html#sub-figures","title":"Sub-Figures","text":"<p>Note</p> <p><code>subcaption</code> is the recommended modern package for handling sub-figures. The older <code>subfigure</code> package is  deprecated. And the <code>subfig</code> package is unsupported, but will still work for most cases.</p> <p>If you want to add multiple figures in a single figure environment, you can use the <code>subcaption</code> package. This package allows you to add multiple sub-figures in a single figure environment.</p>"},{"location":"figures.html#subcaption-example","title":"Subcaption Example","text":"<p>To add sub-figures to your document, you can use the following code:</p> <pre><code>\\usepackage{zref-clever}\n\\usepackage{subcaption}\n\\usepackage{mwe} % Provides example images\n\n\n\\begin{document}\n    \\begin{figure}[h]\n        \\centering\n        \\begin{subcaptiongroup}\n            \\includegraphics[width=0.3\\textwidth]{example-image-a}\n            \\caption{This is the caption of the first sub-figure}\n            \\zlabel{fig:subfigure1}\n            \\includegraphics[width=0.3\\textwidth]{example-image-b}\n            \\caption{This is the caption of the second sub-figure}\n            \\zlabel{fig:subfigure2}\n        \\end{subcaptiongroup}\n        \\captionsetup{subrefformat=parens}\n        \\caption{This is the caption of the \\zcref{fig:subfigure1} and \\zcref{fig:subfigure2}}\n        \\zlabel{fig:figure2}\n    \\end{figure}\n\\end{document}\n</code></pre> <p>This would look like the following:</p> <p></p> <p>In this example they are seperate images that are being included, but you can also include a single image that has multiple sub-figures in it. This is useful if you have a single image file that has multiple sub-figures in it, and you want them to be referenced separately.</p>"},{"location":"figures.html#single-image-with-sub-figures-example","title":"Single Image with Sub-Figures Example","text":"<pre><code>\\usepackage{graphicx}\n\\usepackage{subcaption}\n\\usepackage{zref-clever}\n\\usepackage{hyperref}\n\\usepackage{mwe} % Provides example images\n\n\\newsavebox{\\fourfigurebox}\n\n\\begin{document}\n\n    Lorem ipsum \\zcref{subfig:a}  dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt \n    \\zcref{subfig:b} ut labore et dolore magna aliquyam erat, sed diam voluptua \\zcref{subfig:c}. \n    At vero eos et accusam et \\zcref{subfig:d}.\n\n    \\begin{figure}[htp]\n        \\sbox\\fourfigurebox{\\includegraphics[width=\\textwidth]{foursquare.pdf}}% change with your own image\n\n        \\begin{subfigure}[t][0.5\\ht\\fourfigurebox]{0.5\\textwidth}\n            \\refstepcounter{subfigure}\\zlabel{subfig:a}\n        \\end{subfigure}%&lt;---- Don't forget\n        \\begin{subfigure}[t][0.5\\ht\\fourfigurebox]{0.5\\textwidth}\n            \\refstepcounter{subfigure}\\zlabel{subfig:b}\n        \\end{subfigure}\\par\\nointerlineskip\n        \\begin{subfigure}[t][0.5\\ht\\fourfigurebox]{0.5\\textwidth}\n            \\refstepcounter{subfigure}\\zlabel{subfig:c}\n        \\end{subfigure}%&lt;---- Don't forget\n        \\begin{subfigure}[t][0.5\\ht\\fourfigurebox]{0.5\\textwidth}\n            \\refstepcounter{subfigure}\\zlabel{subfig:d}\n        \\end{subfigure}\\par\\nointerlineskip\n        \\smash{\\usebox{\\fourfigurebox}}\n\n        \\caption{These are four images}\\zlabel{fig:four}\n\n    \\end{figure}\n\n\\end{document}\n</code></pre> <p>This would look like the following:</p> <p></p>"},{"location":"glossaries.html","title":"Glossaries and Acronyms","text":"<p>Note</p> <p>The recommended package for creating glossaries and lists of acronyms is  glossaries.</p> <p>LaTeX has a package for elegant handling of glossaries and acronyms, called <code>glossaries</code>. It is a powerful package  that can be used to create a glossary or list of acronyms. The package is highly customizable and can be used to  create a glossary or list of acronyms in different styles. </p> <p>Use the following code to create a glossary or list of acronyms:</p> <pre><code>\\documentclass{article}\n\\usepackage{glossaries}\n\n\\makeglossaries\n\n\\newglossaryentry{latex}\n{\n    name=LaTeX,\n    description={A document preparation system}\n}\n\n\\newglossaryentry{maths}\n{\n    name=mathematics,\n    description={Mathematics is the study of numbers, quantities, and shapes}\n}\n\n\\newacronym{gcd}{GCD}{Greatest Common Divisor}\n\\newacronym{lcm}{LCM}{Least Common Multiple}\n\n\\begin{document}\n\n\\printglossaries\n\n\\gls{latex} is a typesetting system commonly used for mathematical documents. If you want to find the \\gls{gcd} of \ntwo numbers, you need to find the \\gls{lcm} first.\n\n\\end{document}\n</code></pre> <p>In the above code, the <code>\\newglossaryentry</code> command is used to define a new glossary entry. The <code>name</code> key is used to specify the term, and the <code>description</code> key is used to provide a description of the term. The <code>\\newacronym</code> command is used to define a new acronym. The first argument is the label, the second argument is the short form of the acronym,  and the third argument is the long form of the acronym.</p> <p>The <code>\\printglossaries</code> command is used to print the glossary or list of acronyms in the document. The <code>\\gls</code> command is used to reference a glossary entry or acronym in the text. The first time a glossary entry or acronym is referenced, the full term is displayed along with the abbreviation in parentheses. Subsequent references only display the abbreviation.</p> <p>Using the <code>glossaries</code> package, you can easily create and manage glossaries and lists of acronyms in your LaTeX documents, without ever having to worry about where you first defined them in the document. The package takes care of sorting and formatting the glossary or list of acronyms for you.</p>"},{"location":"installation.html","title":"Installation","text":"<p>Note</p> <p>If you are using Overleaf, you do not need to have a local installation of LaTeX.</p> <p>There are two main ways to install LaTeX on your system:</p> <ol> <li>TeX Live: A comprehensive distribution of LaTeX for Windows, macOS, and Linux.</li> <li>MiKTeX: A distribution of LaTeX for Windows.</li> </ol> <p>Tectonic is also and option but not recommended for beginners.</p> <p>Note</p> <p>TeX Live is recommended for most users.</p> <p>Both distributions provide a package manager to install and update packages. They also provide a GUI for managing the installation. They additionally both provide TeXworks, a simple LaTeX editor which is discussed in more detail in the Editors section.</p>"},{"location":"installation.html#tex-live","title":"TeX Live","text":"<p>TeX Live is a comprehensive distribution of LaTeX for Windows, macOS, and Linux maintained by the TeX Users Group (TUG). It is available for free from the TeX Live website.</p> <p>They provide a detailed installation guide  for all operating systems. And offer a quick installation guide.</p> <p>TeX Live is provided as a single installer for most operating systems and as an  ISO image.</p> <p>Due to the size and volume of packages in modern LaTeX distributions, using the installer can be time-consuming as it downloads all the packages from the internet. The ISO image is recommended for users with slow or unreliable internet.</p> <p>Note</p> <p>The ISO image is a large file (approximately 5.6 GB) but the installation will be quicker as most packages will be installed from the image.</p> <p>Note</p> <p>The installer takes between 30 minutes and 2 hour+ to complete depending on your internet connection and the mirror  quality.</p> <p>Once installed TeX Live has  a package manager called <code>tlmgr</code> (with a gui available) which can be used to install and  update packages.</p> <p>TeX Live is frozen and updated annually and a new version must be installed each year if you want the latest packages.</p> <p>TeX Live often provides the most stable experience for users and is recommended for most users.</p>"},{"location":"installation.html#miktex","title":"MiKTeX","text":"<p>MiKTeX is a distribution of LaTeX for Windows maintained by Christian Schenk. It is available for free from the  MiKTeX website. They provide a detailed installation guide for all operating systems.</p> <p>MiKTeX is provided as a single installer for Windows and as a portable version for USB sticks. The installer is  recommended for most users. The portable version is recommended for users who do not have administrator rights on their computer. The portable version can be installed on a USB stick and run from there.</p> <p>A package manager called <code>mpm</code> which can be used to install and update packages. MiKTeX is updated regularly and packages are updated as needed.</p> <p>MikTeX differs from TeX Live in that it installs packages on the fly as they are needed. This can be useful for users who do not want to download the entire distribution at once. However, it can be slower than TeX Live for users with slow or unreliable internet connections. It can also be less stable than TeX Live as packages are updated more frequently, which can lead to compatibility issues.</p>"},{"location":"magic-coms.html","title":"Magic Comments","text":"<p>Note</p> <p>These should work for most LaTeX editors, but some may have specific requirements or additional options.</p> <p>Magic comments are placed at the beginning of a document and affect how the editor handles the document.</p> <p>This list is not exhaustive, but covers the most common magic comments.</p>"},{"location":"magic-coms.html#compiler-selection","title":"Compiler Selection","text":"<p>The compiler can be selected using:</p> <pre><code>% !TeX program = lualatex\n</code></pre> <p>This will compile the document using LuaLaTeX. Other options include:</p> <ul> <li><code>pdflatex</code></li> <li><code>xelatex</code></li> </ul>"},{"location":"magic-coms.html#encoding","title":"Encoding","text":"<p>Note</p> <p>This is not required for most documents. And LaTeX3 by default uses UTF-8 encoding.</p> <p>The encoding can be selected using:</p> <pre><code>% !TeX encoding = UTF-8\n</code></pre> <p>This will set the encoding to UTF-8. Other options include:</p> <ul> <li><code>latin1</code></li> <li><code>latin9</code></li> <li><code>ascii</code></li> </ul>"},{"location":"magic-coms.html#spell-check","title":"Spell Check","text":"<p>The spell check language can be selected using:</p> <pre><code>% !TeX spellcheck = en_GB\n</code></pre> <p>This will set the spell check language to British English. Other options include:</p> <ul> <li><code>en_US</code></li> <li><code>de_DE</code></li> </ul>"},{"location":"magic-coms.html#tex-root","title":"TeX Root","text":"<p>The root document can be specified using:</p> <pre><code>% !TeX root = main.tex\n</code></pre> <p>This will set the root document to <code>main.tex</code>. This is useful for multi-file documents.</p>"},{"location":"multifile-docs.html","title":"MultiFile Documents in LaTeX","text":"<p>One of the very fun features of LaTeX is the ability to split your document into multiple files and work on each of them separately or even include them in multiple documents. This is particularly useful when you are working on a large document, such as a book or a thesis, and you want to keep your files organized or use certain chapters/sections for  other things.</p> <p>There are a few ways to do this in LaTeX, with two in built methods (using <code>\\input</code> and <code>\\include</code>) and a few package based methods (such as <code>subfiles</code> and <code>standalone</code>).</p> <p>The in-built methods are simpler and work well for most cases, but lack the elegance and flexibility of the package based methods. The package based methods are more powerful and provide additional features, such as the ability to handle folder structures and preamble sharing for you.</p> <p>Note</p> <p>The <code>standalone</code> and <code>subfiles</code> packages should work together but may sometimes have issues. Make sure the <code>standalone</code> package is loaded before the <code>subfiles</code> package. And you need to call the standalone files with <code>\\subfile</code> or <code>\\subfileinclude</code> instead of <code>\\input</code> or <code>\\include</code>.</p>"},{"location":"multifile-docs.html#using-the-subfiles-package","title":"Using the <code>subfiles</code> Package","text":"<p>Note</p> <p><code>subfiles</code> sometimes seems to struggle when you have your preamble in a <code>.sty</code> file. If you are having trouble with this, try saving your preamble as a <code>.tex</code> file instead.</p> <p>The <code>subfiles</code> package is a popular choice for creating multi-file documents in LaTeX. It allows you to create a main document that includes multiple subfiles, each of which can be compiled independently, and pull their preamble from the main document. This makes it easy to work on different parts of a document separately and combine them later maintaining only one preamble.</p> <p>To use the <code>subfiles</code> package, you need to include it in your main document and use the <code>\\subfile</code> command in each of your subfiles. Here is an example of how to use the <code>subfiles</code> package if you have the following file structure:</p> <pre><code>\u251c\u2500 main.tex                                 # Main document\n\u251c\u2500 chapter1/                                # Subfolder for chapter 1\n\u2502   \u2514\u2500 chapter1.tex                         # Subfile for chapter 1\n</code></pre> <pre><code>% main.tex\n\\documentclass{article}\n\\usepackage{subfiles}\n\n\\begin{document}\n\\subfile{chapter1}\n\\subfile{chapter2}\n\\end{document}\n</code></pre> <pre><code>% chapter1.tex\n\\documentclass[../main.tex]{subfiles} % Note the path to the main document ../ takes you up one level\n\\begin{document}\n\\chapter{Chapter 1}\nThis is chapter 1.\n\\end{document}\n</code></pre> <p>The <code>subfiles</code> package provides the <code>\\subfile</code> command, which is used to include a subfile in the main document. The subfile should be a standalone LaTeX document that can be compiled on its own. When you compile the main document, the contents of the subfiles will be included in the output. It additionally provides the <code>\\subfileinclude</code> which behave similar to <code>\\include</code> but with the added benefit of being able to compile the subfile independently.</p> <p>If using a bibliography or some other external files, you may need to place them inside a special command in the main document to ensure they are included in the subfiles. This can be done using the <code>\\subfix</code> and  <code>ifSubfilesClassLoaded</code> commands as follows:</p> <pre><code>% main.tex\n\\documentclass{article}\n\\usepackage{biblatex}\n\\usepackage{subfiles}\n\\ifSubfilesClassLoaded{%\n    \\addbibresource{\\subfix{references.bib}}    % True case\n    }{%\n    \\addbibresource{references.bib}             % False case\n    }\n</code></pre> <p>This should allow all child documents to access the bibliography file and maintains autocomplete functionality. The <code>\\subfix</code> command alone will also work. However, this has a tendency to break autocomplete functionality in some editors so play with it and find what works for your case.</p> <p>Or for example if you have a central data folder and want to access it from subfiles. For example if you had the following file structure:</p> <pre><code>\u251c\u2500 main.tex                                 # Main document\n\u251c\u2500 preamble.tex                             # Preamble file\n\u251c\u2500 data/                                    # Subfolder for data\n\u2502   \u2514\u2500 data.csv                             # Data file\n\u251c\u2500 chapter1/                                # Subfolder for chapter 1\n\u2502   \u251c\u2500 chapter1.tex                         # Subfile for chapter 1\n\u2502   \u251c\u2500 digarams/                            # Subfolder for diagrams for chapter 1\n\u2502   \u2502   \u2514\u2500 diagram1.tex                     # Subfile for diagram 1\n</code></pre> <p>You can access the data file from the subfiles by using the <code>\\subfix</code> command as follows:</p> <pre><code>% diagram1.tex\n\\documentclass[../../main.tex]{subfiles}    % Note the path to the main document ../../ takes you up two levels\n\\begin{document}\n\n\\def\\datafile{\\subfix{../../data/data.csv}} % Defines the path as a command so we only need to subfix once\n\n\\pgfplotstableread[col sep=comma]{\\datafile}\\data   % Reads the data file into a table\n\n\\begin{tikzpicture}\n\n\\begin{axis}\n\\addplot table {\\data};                     % Plots the data\n\\end{axis}\n\n\\end{tikzpicture}\n\n\\end{document}\n</code></pre> <p>If you wanted to make your diagram using the subfile package you would want to keep the formatting of the diagram document the same including the use of <code>\\subfix</code> but you would need to change the preamble and class to the following:</p> <pre><code>% diagram1.tex\n\\documentclass[tikz,crop]{standalone}\n\n\\input{../../preamble.tex}                  % Include the preamble from the main document\n....Rest of the document....\n</code></pre> <p>For more information on the <code>subfiles</code> package, see the documentation.</p>"},{"location":"multifile-docs.html#using-the-standalone-package","title":"Using the <code>standalone</code> Package","text":"<p>The <code>standalone</code> package is another popular choice for creating multi-file documents in LaTeX. It allows you to create standalone versions of your subfiles that can be compiled independently and included in the main document. I find the focus of <code>standalone</code> to be on creating images and figures that can be included in multiple documents, but it can be used for other things as well.</p> <p>To use the <code>standalone</code> package, you need to include it in your main document and use the <code>\\input</code> command to include the standalone versions of your subfiles. Here is an example of how to use the <code>standalone</code> package:</p> <pre><code>% main.tex\n\\documentclass{article}\n\\usepackage{standalone}\n\n\\begin{document}\n\\input{chapter1}\n\\input{diagram1}\n\\input{chapter2}\n\\end{document}\n</code></pre> <pre><code>% chapter1.tex\n\\documentclass[class=article]{standalone}\n\\begin{document}\n\\chapter{Chapter 1}\nThis is chapter 1.\n\\end{document}\n</code></pre> <pre><code>% diagram1.tex\n\\documentclass[class=article,crop,tikz]{standalone}\n\\begin{document}\n\\begin{tikzpicture}\n\\draw (0,0) -- (1,1);\n\\end{tikzpicture}\n\\end{document}\n</code></pre> <p>The <code>standalone</code> package provides the <code>standalone</code> document class, which is used to create standalone versions of your subfiles. The <code>class</code> option is used to specify the class of the main document, and the <code>crop</code> option is used to crop the output to the size of the content. The <code>tikz</code> option is used to load the <code>tikz</code> package, which is commonly used for creating diagrams and figures.</p> <p>You may want to look at using the <code>import</code> package if you have a more complex file structure that has multiple levels of folders. Or you can use the <code>subfiles</code> package in conjunction with the <code>standalone</code> package to get the best of both worlds.</p> <p>For more information on the <code>standalone</code> package, see the documentation.</p> <p>Note</p> <p>For the methods listed below you will need to make sure the document preamble is included in each file. This is because each file is compiled separately and does not have access to the preamble of the main document. The main document should also contain any packages that are used in the included files.</p>"},{"location":"multifile-docs.html#using-input","title":"Using <code>\\input</code>","text":"<p>The <code>\\input</code> command is the simplest way to include another file in your document. It is used as follows:</p> <pre><code>\\input{filename}\n</code></pre> <p>This will include the contents of <code>filename.tex</code> in your document at the point where the command is called. The file extension (<code>.tex</code>) is optional, and if not provided, LaTeX will look for a file with the given name and a <code>.tex</code>  extension.</p> <p>The <code>\\input</code> command is useful when you want to include the contents of another file as is, without any additional formatting or separation. It is commonly used to include chapters or sections of a larger document.</p>"},{"location":"multifile-docs.html#using-include","title":"Using <code>\\include</code>","text":"<p>The <code>\\include</code> command is similar to <code>\\input</code> but provides some additional features. It is used as follows:</p> <pre><code>\\include{filename}\n</code></pre> <p>The main difference between <code>\\input</code> and <code>\\include</code> is that <code>\\include</code> forces a page break before and after the included file. This can be useful when you want to include chapters or sections that should start on a new page, but can sometimes be undesirable if you want to include smaller snippets of text.</p> <p>Another feature of <code>\\include</code> is that it allows you to use the <code>\\includeonly</code> command to include only specific files in your document. This can be useful when working on a large document, and you only want to compile certain parts.</p>"},{"location":"preamble.html","title":"Preambles","text":"<p>In LaTeX, the preamble is the part of the document before the <code>\\begin{document}</code> command. It is used to define the  document class, load packages, and set up the document layout.</p> <p>These can be as short as a single line or as long as several pages. Longer where you may be using custom commands or a large number of packages.</p> <p>In cases where you are loading a large number of packages, it is often a good idea to create a preamble file that you can input into your document. This can help keep your document clean and make it easier to reuse the same preamble in multiple documents. (Although some packages handle this for you. See Multi-file Documents.)</p>"},{"location":"preamble.html#basic-preamble","title":"Basic Preamble","text":"<p>A basic preamble might look like this:</p> <pre><code>\\documentclass{article}\n\\usepackage{graphicx}\n\\usepackage[2.5cm, 2.5cm]{geometry} % Set margins\n</code></pre> <p>At a minimum, you need to specify the document class. The <code>article</code> class is a good choice for most documents. While the <code>report</code> and <code>book</code> classes are also common, they are more suited to longer documents as they include the additional header of chapter.</p>"},{"location":"preamble.html#complex-preamble","title":"Complex Preamble","text":"<p>A more complex preamble might look like this:</p> <p>Note</p> <p>This is a random preamble, it is not meant to be used as is. It is just an example of what a more complex preamble might look like.</p> <pre><code>\\documentclass{article}\n\\usepackage{graphicx}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{hyperref}\n\\usepackage{cleveref}\n\\usepackage{tabularray}\n\\usepackage{tikz}\n\\usepackage{pgfplots}\n\\usepackage{siunitx}\n\\usepackage{booktabs}\n\\usepackage{enumitem}\n\\usepackage{minted}\n\n\\pgfplotsset{compat=1.18}\n\\usetikzlibrary{arrows.meta}\n\\usetikzlibrary{calc}\n\\usetikzlibrary{positioning}\n\\usetikzlibrary{shapes.geometric}\n\\usetikzlibrary{shapes.misc}\n\\usetikzlibrary{shapes.symbols}\n\\usetikzlibrary{statistics}\n\n\\hypersetup{\n    colorlinks=true,\n    linkcolor=blue,\n    filecolor=magenta,\n    urlcolor=cyan,\n}\n\n\\makeatletter\n\\newcommand{\\crefrangeconjunction}{--}\n\\makeatother\n</code></pre> <p>As you can see, this preamble loads a large number of packages and sets up some custom settings for those packages, in addition to specifying a custom command. To make this more manageable, it is normally reccomended to save this as a separate <code>tex</code> file and then input it into your document.</p> <p>e.g. if you save the above preamble as <code>preamble.tex</code>, minus the <code>\\documentclass{}</code>, you can then include it in your  document like this:</p> <pre><code>\\documentclass{article}\n\n\\input{preamble}\n</code></pre> <p>This will be functionally equivalent to having the entire preamble in your document.</p> <p></p>"},{"location":"python-graphics.html","title":"PGF Graphics using Python","text":"<p>While PGFPlots is a generally powerful tool for plotting, it has limitations specifically when it comes to statistical graphics. For example polynomial regression is not natively supported as of version 1.18. This is where Python can be useful, as it has a wide range of libraries for creating complex statistical graphics.</p> <p>Additionally, if you already use Python for data analysis, it may be more convenient to continue using Python rather than learning the syntax for PGFPlots.</p> <p>Using MatPlotlib, you can create your graphics in Python and then import them in to LaTeX using the <code>pgf</code> backend in  MatPlotlib. This will allow you to create complex graphics in Python and then use them in your LaTeX document.</p> <p>Using this method will often require the following LaTeX preamble:</p> <pre><code>\\usepackage{tikz}\n\\usepackage{tikz-cd}\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=1.18}\n</code></pre> <p>To do this, you will need to install the <code>matplotlib</code> package in Python. You can do this using <code>pip</code>:</p> <pre><code>pip install matplotlib\n</code></pre> <p>Then you can create your graphics in Python using MatPlotlib and save them as a <code>pgf</code> file. The important part is to set the <code>matplotlib</code> backend to <code>pgf</code> and then save the figure as a <code>pgf</code> file. Bear in mind that this means you cannot use <code>plt.show()</code> to display the plot, as this will not work with the <code>pgf</code> backend.</p> <p>Additionally, you will need to set you <code>rcParams</code> in advance to ensure the plot renders how you want in LaTeX.</p> <p>Figure sizes are specified in inches, and the default LaTeX <code>\\textwidth</code> is 4.7747 inches. If you have set custom margins in your LaTeX document, you will need to adjust the figure size accordingly.</p>"},{"location":"python-graphics.html#matplotlib-plots","title":"MatPlotlib Plots","text":"<pre><code>import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmatplotlib.use(\"pgf\")\nmatplotlib.rcParams.update({\n    \"pgf.texsystem\": \"pdflatex\",       # pdflatex, XeLaTeX, or LuaLaTeX for processing\n    'font.family': 'serif', # use serif/main font for text elements\n    'font.size' : 11,  # use 11 point font \n    'text.usetex': True,   # use LaTeX to write all text \n    'pgf.rcfonts': False, # Do not set up fonts from rc parameters\n    \"figure.figsize\": [4.7747,3.5], # figure size in inches this is equivalent to the default LaTeX \\textwidth\n    'axes.edgecolor': 'gray',   # Axis line color\n    'xtick.color': 'gray',      # Color of the tick labels\n    'ytick.color': 'gray',       # Color of the tick labels\n    'text.color': 'gray',        # Color of the text\n    'axes.labelcolor': 'gray',   # Color of the x and y labels\n    'grid.color': 'gray',         # Grid line color\n    'grid.linestyle': '-',       # Grid line style\n    'grid.linewidth': 0.5,        # Grid line width\n    'axes.grid': True,            # Enable grid by default\n    'grid.alpha': 0.7,            # Transparency of grid\n    'axes.axisbelow': True      # Show grid below all plots\n})\n\nnp.random.seed(19680801)\n\n# example data\nmu = 100  # mean of distribution\nsigma = 15  # standard deviation of distribution\nx = mu + sigma * np.random.randn(437)\n\nnum_bins = 50\n\nfig, ax = plt.subplots()\n\n# the histogram of the data\nn, bins, patches = ax.hist(x, num_bins, density=1, alpha=0.75)\n\n# add a 'best fit' line\ny = ((1 / (np.sqrt(2 * np.pi) * sigma)) *\n     np.exp(-0.5 * (1 / sigma * (bins - mu))**2))\nax.plot(bins, y, '--')\nax.set_xlabel('Smarts')\nax.set_ylabel('Probability density')\nax.set_title(r'Histogram of IQ: $\\mu=100$, $\\sigma=15$')\n\n# Tweak spacing to prevent clipping of ylabel\nfig.tight_layout()\nplt.savefig('hist.pgf')\n</code></pre> <p>Then you can import the <code>pgf</code> file in to your LaTeX document using the <code>\\input</code> command:</p> <pre><code>\\begin{figure}\n    \\begin{center}\n        \\input{hist.pgf}\n    \\end{center}\n\\end{figure}\n</code></pre> <p>This produced the following output:</p> <p></p> <p>Another plot can be created using the following code:</p> <pre><code>import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nmatplotlib.use(\"pgf\")\nmatplotlib.rcParams.update({\n    \"pgf.texsystem\": \"pdflatex\",       # pdflatex, XeLaTeX, or LuaLaTeX for processing\n    'font.family': 'serif', # use serif/main font for text elements\n    'font.size' : 11,  # use 11 point font \n    'text.usetex': True,   # use LaTeX to write all text \n    'pgf.rcfonts': False, # Do not set up fonts from rc parameters\n    \"figure.figsize\": [4.7747,3.5], # figure size in inches\n    'axes.edgecolor': 'gray',   # Axis line color\n    'xtick.color': 'gray',      # Color of the tick labels\n    'ytick.color': 'gray',       # Color of the tick labels\n    'text.color': 'gray',        # Color of the text\n    'axes.labelcolor': 'gray',   # Color of the x and y labels\n    'grid.color': 'gray',         # Grid line color\n    'grid.linestyle': '-',       # Grid line style\n    'grid.linewidth': 0.5,        # Grid line width\n    'axes.grid': True,            # Enable grid by default\n    'grid.alpha': 0.7,            # Transparency of grid\n    'axes.axisbelow': True      # Show grid below all plots\n})\n\nplt.plot([1, 2, 3, 4])\nplt.ylabel('some numbers')\nplt.savefig('test.pgf')\n</code></pre> <p>And then imported in to LaTeX:</p> <pre><code>\\begin{figure}\n    \\begin{center}\n        \\input{test.pgf}\n    \\end{center}\n\\end{figure}\n</code></pre> <p>This produced the following output:</p> <p></p> <p>This is a powerful way to create complex graphics in LaTeX, as it allows you to use the full power of MatPlotlib to create your graphics. This is not just limited to MatPlotlib, you can use any Python package that uses MatPlotlib as a backend to create your graphics, such as Seaborn or Plotly. This can be particularly useful if you are trying to import statistical graphics in to your LaTeX document.</p>"},{"location":"python-graphics.html#seaborn-plots","title":"Seaborn Plots","text":"<p>Seaborn is a Python data visualization library based on MatPlotlib. It provides a high-level interface for drawing attractive and informative statistical graphics. You can use Seaborn to create complex statistical graphics and then import them in to LaTeX using the <code>pgf</code> backend in MatPlotlib.</p> <p>To use Seaborn, you will need to install the <code>seaborn</code> package in Python. You can do this using <code>pip</code>:</p> <pre><code>pip install seaborn\n</code></pre> <p>Example seaborn plot:</p> <pre><code>import matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nmatplotlib.use(\"pgf\")\nmatplotlib.rcParams.update({\n    \"pgf.texsystem\": \"pdflatex\",       # pdflatex, XeLaTeX, or LuaLaTeX for processing\n    'font.family': 'serif', # use serif/main font for text elements\n    'font.size' : 11,  # use 11 point font \n    'text.usetex': True,   # use LaTeX to write all text \n    'pgf.rcfonts': False, # Do not set up fonts from rc parameters\n    'axes.formatter.use_mathtext': True,  # Use mathtext for axes\n    \"figure.figsize\": [4.7747,3.5], # figure size in inches\n    'axes.edgecolor': 'gray',   # Axis line color\n    'xtick.color': 'gray',      # Color of the tick labels\n    'ytick.color': 'gray',       # Color of the tick labels\n    'text.color': 'gray',        # Color of the text\n    'axes.labelcolor': 'gray',   # Color of the x and y labels\n    'grid.color': 'gray',         # Grid line color\n    'grid.linestyle': '-',       # Grid line style\n    'grid.linewidth': 0.5,        # Grid line width\n    'axes.grid': True,            # Enable grid by default\n    'grid.alpha': 0.7,            # Transparency of grid\n    'axes.axisbelow': True,     # Show grid below all plots\n})\n\n\n# Load the example tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Create a polynomial regression plot\nsns.regplot(x=\"total_bill\", y=\"tip\", data=tips, order=3)\nplt.ylim(0, 12)\nplt.ylabel('Tip')\nplt.xlabel('Total Bill $\\%$')\nplt.savefig('quadplot.pgf')\n</code></pre> <p>And then imported in to LaTeX:</p> <pre><code>\\begin{figure}\n    \\begin{center}\n        \\input{quadplot.pgf}\n    \\end{center}\n\\end{figure}\n</code></pre> <p>This produced the following output:</p> <p></p>"},{"location":"quickstart.html","title":"Quickstart","text":"<p>If you want to jump right in to using LaTeX here is a quick summation of the basics you need to know.</p> <p>Trust LaTeX to do the formatting for you. You just need to focus on the content. This is the principal that LaTeX is built on.</p>"},{"location":"quickstart.html#creating-a-document","title":"Creating a Document","text":"<p>To create a document you need to start with a preamble. This is where you define the type of document you are creating  and any packages you want to use. Here is an example of a simple preamble:</p> <pre><code>\\documentclass{article}\n</code></pre> <p>This preamble tells LaTeX that you are creating an article. You can also create other types of documents such as books,  reports.</p>"},{"location":"quickstart.html#adding-content","title":"Adding Content","text":"<p>Once you have your preamble you can start adding content to your document. Here is an example of a simple document:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\nHello, world!\n\n\\end{document}\n</code></pre> <p>This will create a document with the text \"Hello, world!\".</p>"},{"location":"quickstart.html#adding-sections","title":"Adding Sections","text":"<p>You can add sections to your document using the <code>\\section</code> command. Here is an example:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\n\\section{Introduction}\n\nHello, world!\n\n\\end{document}\n</code></pre> <p>This will create a document with a section titled \"Introduction\" and the text \"Hello, world!\".</p> <p>You can also add subsections using the <code>\\subsection</code> command, and subsubsections using the <code>\\subsubsection</code> command.</p>"},{"location":"quickstart.html#adding-lists","title":"Adding Lists","text":"<p>You can add lists to your document using the <code>itemize</code> and <code>enumerate</code> environments. Itemized lists are bullet points, and enumerated lists are numbered. Here is an example of an itemized list:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\n\\begin{itemize}\n    \\item Item 1\n    \\item Item 2\n    \\item Item 3\n\\end{itemize}\n\n\\end{document}\n</code></pre> <p>This will create a document with an itemized list with three items.</p>"},{"location":"quickstart.html#adding-math","title":"Adding Math","text":"<p>You can add math to your document using the <code>\\[</code> and <code>\\]</code> delimiters. Here is an example:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\n\\[ f(x) = x^2 \\]\n\n\\end{document}\n</code></pre> <p>This will create a document with the math equation \\(f(x) = x^2\\).</p>"},{"location":"quickstart.html#figure-tables-and-equation-environments","title":"Figure, Tables, and Equation environments","text":"<p>You can add figures, tables, and equations to your document using the <code>figure</code>, <code>table</code>, and <code>equation</code> environments. Here is an example of a figure:</p> <pre><code>\\documentclass{article}\n\n\\begin{document}\n\n\\begin{figure}\n    \\centering\n    \\includegraphics{example-image-a}\n    \\caption{An example image}\n\\end{figure}\n\n\\begin{table}\n    \\centering\n    \\begin{tabular}{|c|c|c|}\n        \\hline\n        A &amp; B &amp; C \\\\\n        \\hline\n        1 &amp; 2 &amp; 3 \\\\\n        \\hline\n    \\end{tabular}\n    \\caption{An example table}\n\\end{table}\n\n\\begin{equation}\n    f(x) = x^2\n\\end{equation}\n\n\\end{document}\n</code></pre>"},{"location":"spellchecking.html","title":"Spellchecking","text":"<p>Spellchecking is generally dependent on the editor you are using. Most editors have built-in spellchecking, but if  you are using a simple text editor, you can use a spellchecker like <code>aspell</code> or <code>hunspell</code>. </p> <p>With more feature-rich editors like TeXstudio and Visual Studio Code, you can full grammar checking and spellchecking as you type using the LanguageTool extension.</p> <p>Information for how to do this in Visual Studio Code can be found here.</p> <p>For TeXstudio:</p> <p>Note You need TeXstudio 2.12.2 or later to work with LT 3.6 or later</p> <p>You need have the standalone LanguageTool java application installed on your system. You can download it from here.</p> <p>In TeXstudio navigate to Options &gt; Configure TexStudio\u2026 &gt; Language Checking &gt; LanguageTool (near the bottom as of 4.8.4).</p> <p>You should start the LanguageTool stand-alone version, languagetool.jar. Then simply open Options and select the  option to run it as HTTP server. By default, it uses port 8081. You can change this in the options. But you need to  change this in TeXstudio as well.</p> <p>If TexStudio is configured to use inline grammar checking (which is the default, see Options &gt; Configure TexStudio\u2026 &gt;  Editor &gt; Inline Checking &gt; Grammar), you should see grammar checks immediately.</p> <p>Occasionally it will flag LaTeX commands as errors.</p>"},{"location":"suggested-packages.html","title":"Suggested Packages","text":"<p>This is a list of suggested packages that you can install to enhance your experience with LaTeX or have a base preamble to start with.</p> <pre><code>\\usepackage{standalone} % Required for including standalone files\n\n\\usepackage{geometry} % Required for adjusting page dimensions and margins\n\\geometry{verbose,tmargin=2.54cm,bmargin=2.54cm,lmargin=2.54cm,rmargin=2.54cm} % Set the margins\n\n\\usepackage{amssymb} % For math symbols\n\\usepackage{amsmath} % For math extended mode\n\\usepackage{amstext} % For text in math mode\n\\usepackage{arevmath} % For math symbols\n\\usepackage{mathtools} % Allows for additional math symbols\n\n\\usepackage{graphicx} % Required for including images\n\\usepackage{float} % Allows putting an [H] in \\begin{figure} to specify the exact location of the figure\n\n\\usepackage{tikz}\n\\usetikzlibrary{arrows.meta,patterns.meta,shapes}\n\\usetikzlibrary{matrix,positioning}\n\n\\usepackage{pgfplots}\n\\pgfplotsset{compat=1.18}\n\\usepackage{pgfplotstable}\n\\usepgfplotslibrary{groupplots}\n\\usepgfplotslibrary{colormaps,statistics}\n\n\\renewcommand{\\familydefault}{\\sfdefault} % Define the default font family\n\n\\usepackage[l3]{csvsimple}\n\\usepackage{booktabs}\n\\usepackage{array}\n\\usepackage[fitting,most]{tcolorbox}\n\\usepackage{subcaption}\n\\usepackage{refstyle}\n\\usepackage{siunitx}\n\n\\usepackage{zref-clever} % Clever zref support\n\\usepackage{zref-xr} % Cross-referencing between documents\n\\usepackage{hyperref} % Hyperlinks\n\n\\usepackage{tabularray} % Current preferred package for tables\n\\usepackage{etoolbox} % Provdies a list of tools for programming in LaTeX\n\\usepackage{setspace} % Provides the \\onehalfspacing command\n\\onehalfspacing\n\\usepackage{polyglossia} % Required for multilingual documents\n\n\\usepackage{glossaries} % Required for creating glossaries\n\\setacronymstyle{long-sc-short} % Set the acronym style\n\n\\setdefaultlanguage[variant=british]{english} % Set the default language\n\\usepackage[obeyFinal,textsize=scriptsize]{todonotes} % Required for adding todo notes/comments\n\\usepackage{pdfpages} % Required for including PDFs\n\\usepackage{datetime2} % Required for date and time formatting\n</code></pre> <p>If you want to use subfiles make sure you load it after your bibliography and glossaries packages, but before  any files that require it. Such as a <code>subfix</code> command. More information on the <code>subfiles</code> package can be found in Multi-file Documents and their documentation.</p>"},{"location":"tables.html","title":"Tables","text":"<p>Note</p> <p>The recommended package for creating tables is tabularray.</p> <p>Tables can be created using the <code>\\begin{table}</code> environment or the <code>\\begin{tblr}</code> environment from the <code>tabularray</code>  package. The difference between the two is that the former is a floating environment, while the latter is not.</p> <p>Table with <code>tabularray</code> package:</p> <pre><code>\\documentclass{article}\n\\usepackage{tabularray}\n\\begin{document}\n\n\\begin{tblr}{hlines,vlines}\n  Alpha &amp; Beta &amp; Gamma \\\\\n  Epsilon &amp; Zeta &amp; Eta \\\\\n\\end{tblr}\n\n\\end{document}\n</code></pre> <p>Table with <code>table</code> environment:</p> <p>Note</p> <p>This still requires the <code>tabularray</code> package.</p> <pre><code>\\documentclass{article}\n\\usepackage{tabularray}\n\\begin{document}\n\n\\begin{table}\n  \\centering\n    \\begin{tblr}{hlines,vlines}\n      Alpha &amp; Beta &amp; Gamma \\\\\n      Epsilon &amp; Zeta &amp; Eta \\\\\n    \\end{tblr}\n    \\caption{A table}\n\\end{table}\n\n\\end{document}\n</code></pre> <p>Using floating tables is recommended when you want LaTeX to decide where to place the table. If you want to place the table at a specific location, you can use the <code>[H]</code> option from the <code>float</code> package.</p> <p>You can additionally caption the table using the <code>\\caption</code> command and label it using <code>\\zlabel</code> or <code>\\label</code> (depending on whether you are using the <code>zref</code> package mentioned in Cross-Referencing).</p>"},{"location":"tables.html#auto-generating-tables","title":"Auto-generating tables","text":"<p>If you have a CSV file or dat file you can auto-generate tables for your data. This uses the <code>csvsimple</code> package in combination with the <code>tabularray</code> package. There are a few ways to do this, but here are the most common ones:</p> <p>You can load the package <code>csvsimple</code> with <code>\\usepackage{csvsimple}</code> or <code>\\usepackage[l3]{csvsimple}</code>.</p> <p>If you have a CSV file with the following data:</p> Name Givenname Matriculation Gender Grade Maier Hans 12345 m 1 Huber Anna 23456 f 2.3 Wei\u00dfback Werner 34567 m 5 Bauer Maria 19202 f 3.3"},{"location":"tables.html#csvreader-verbose-method","title":"csvreader (Verbose Method)","text":"<p>The most complex read in is the following, This allows for alot of customisation but due to the verbosity it is not always easy to get right:</p> <pre><code>\\csvreader[%\n    head to column names,\n    centered tabularray={%\n        width=\\textwidth, \n        hline{1,2,Z}={1pt, solid}, \n        colspec={X[l] X[c] X[c] X[c] X[c]},\n        },\n    table head={Name &amp; Givenname &amp; Matric &amp; Gender &amp; Grade\\\\}\n    ]{data.csv}{}{%\n        \\Name &amp; \\Givenname &amp; \\Matriculation &amp; \\Gender &amp; \\Grade\n    }\n</code></pre>"},{"location":"tables.html#csvautotabularray-simple-method","title":"csvautotabularray (Simple Method)","text":"<p>The following is a simpler version of the above, using the <code>csvautotabularray</code> it can be as simple as a single line:</p> <pre><code>\\csvautotabularray[table centered]{data.csv}\n</code></pre> <p>This is still customisable through the following two additions of optional arguments.</p> <pre><code>\\csvautotabularray[table centered]{data.csv}[%\n    width=\\textwidth,\n    hline{1,2,Z}={1pt,solid},\n    colspec={X[l] X[c] X[c] X[c] X[c]},\n    row{1}={font=\\bfseries}\n    ]\n</code></pre> <p>To add a caption to the table you just need to add caption to the first set of optional arguments:</p> <pre><code>\\csvautotabularray[table centered]{data.csv}[tall,caption={This is a table},remark{Note}={This a remark on the table},][%\n    width=\\textwidth,\n    hline{1,2,Z}={1pt,solid},\n    colspec={X[l] X[c] X[c] X[c] X[c]},\n    row{1}={font=\\bfseries}\n    ]\n</code></pre>"},{"location":"tables.html#column-types","title":"Column Types","text":"<p>The <code>tabularray</code> package has a number of column types that can be used to format the data in the table. Here are some examples:</p> <ul> <li><code>X[l]</code>: Left-aligned column</li> <li><code>X[c]</code>: Centered column</li> <li><code>X[r]</code>: Right-aligned column</li> <li><code>X[p]</code>: Paragraph column</li> </ul> <p>The X column type allows for the column to be stretched to fit the width of the table. This is useful when you have a lot of data in a column, and you want it to wrap and do not want to manually set the width of the column.</p>"},{"location":"tables.html#multi-row-and-multi-column-cells","title":"Multi-Row and Multi-Column Cells","text":"<p>The <code>tabularray</code> package also has support for multi-row and multi-column cells. Here are some examples:</p> <ul> <li><code>\\SetCell[r=2]{c}</code>: Multi-row cell spanning 2 rows and centered</li> <li><code>\\SetCell[c=2]{c}</code>: Multi-column cell spanning 2 columns and centered</li> <li><code>\\SetCell[r=2,c=2]{c}</code>: Multi-row and multi-column cell spanning 2 rows and 2 columns and centered</li> </ul> <p>This would look like:</p> <pre><code>\\begin{tblr}{hlines,vlines}\n  Alpha &amp; Beta &amp; Gamma \\\\\n  \\SetCell[r=2]{c} Epsilon &amp; Zeta &amp; Eta \\\\\n  Iota &amp; Kappa &amp; Lambda \\\\\n\\end{tblr}\n</code></pre>"},{"location":"tables.html#further-information","title":"Further Information","text":"<p>For more information on the <code>tabularray</code> package, you can refer to the documentation.</p>"},{"location":"thesis.html","title":"Writing a Thesis in LaTeX","text":"<p>You can do it.</p> <p>Note</p> <p>This page in future will contain a template for writing a thesis in LaTeX.</p>"},{"location":"tikz.html","title":"Using TikZ/PGF to Create LaTeX Graphics","text":"<p>Info</p> <p>This guide uses tikzjax to render TikZ/PGF code in the browser. If you cannot see the graphics, try refreshing the  page. If that does not work you may need to enable JavaScript or view the page in a browser that supports JavaScript.</p> <p>TikZ and PGF can produce highly complex code and graphics, but in doing so, they require more time and effort to learn and use effectively. This guide will provide a brief overview of how to use TikZ/PGF and PGFPlots to create  graphics in LaTeX documents. However, I would strongly recommend reading the following resources for a fantastic guide  on how to use them that will be far more comprehensive than this guide:</p> <ul> <li>Unlocking LaTeX Graphics - Dr Tamara G. Kolda</li> <li>TikZ &amp; PGF Manual</li> <li>PGFPlots Online Manual - Unofficial HTML manual but very helpful</li> <li>PGFPlots Manual</li> </ul> <p>Like in Kolda's guide this page will focus on the most used features of TikZ and PGF and most relevant elements to producing graphics in a report, it will not cover every aspect of TikZ and PGF.</p> <p>If you find you don't want to code all the graphics yourself there are still some helpful tools that can do most of the work for you such as the PGFPlotsEdt tool found here PGFPlotsEdt (Github).</p> <p>There can be some confusion around TikZ and PGF and how they relate to each other. TikZ is a frontend for PGF, which is a lower-level language for producing graphics in LaTeX. TikZ is a more user-friendly interface for PGF, and it is what most people use when creating graphics in LaTeX. However, PGF is more powerful and can be used to create more complex graphics than TikZ. For the purposes of this guide, we will be using TikZ, but it is worth noting that PGF is also available if you need more power. </p> <p>There is also PGFPlots which is a package built on top of TikZ and PGF that is specifically designed for creating  plots and charts. It features plot types that are not natively available in TikZ/PGF, such as box plots. It is maintained by the same team that maintains TikZ and PGF, so it is well-integrated with the rest of the LaTeX ecosystem.</p> <p>Additionally, while these use to be separate packages, they are now bundled together in the same package, so you only need to include <code>\\usepackage{tikz}</code> in your preamble. But libraries can be loaded with either  <code>\\usetikzlibrary{&lt;library&gt;}</code> or <code>\\usepgflibrary{&lt;library&gt;}</code>.</p> <p>If you want to use PGFPlots, you will need to include <code>\\usepackage{pgfplots}</code> in your preamble.</p> <p>The following will show you how to create graphics using the <code>datavisulization</code> tool and <code>PGFPlots</code>.</p>"},{"location":"tikz.html#getting-data-in-to-tikz","title":"Getting Data in to TikZ","text":"<p>There are a few ways to get data in to TikZ, the most common are:</p> <ul> <li>Hardcoding the data in the TikZ code</li> <li>Using a CSV file</li> <li>Using a data file</li> </ul> <p>The most common method is to hardcode the data in the TikZ code, but this can be cumbersome for large datasets. Using a CSV file is a good alternative, as it allows you to keep the data separate from the code. This can be done using:</p> <p>To read from a file:</p> <pre><code>\\pgfdata[format=table, read from file=&lt;filename.csv&gt;]\n</code></pre> <pre><code>\\datavisualization [\n    scientific axes=clean,\n    x axis={length=3cm, ticks=few},\n    all axes={grid},\n    visualize as smooth line\n    ] \n    data [format=table, read from file=file1.csv];\n</code></pre> <p>Alternatively you can use <code>pgfplotstable</code> and <code>pgfplots</code> packages to read in data from a file, you will need to  specify the column separator:</p> <pre><code>\\usepackage{pgfplots}\n\\usepackage{pgfplotstable}\n\n\\begin{document}\n\n\\pgfplotstableread[col sep=comma]{&lt;filename.csv&gt;}\\data\n\n\\begin{tikzpicture}\n\\begin{axis}[grid=both]\n\\addplot[smooth] table {\\data};\n\\end{axis}\n\\end{tikzpicture}\n\n\\end{document}\n</code></pre> <p>As you will notice this is a lot more verbose than the datavisualization method. Datavisualization is designed to be simpler and is more user-friendly for most basic plots. However, <code>pgfplots</code> is a very powerful package and is  widely used and has a wealth of documentation due to its age while data visualization is still relatively new in  the scheme of LaTeX packages.</p> <p>Note</p> <p>PGFPlots has not been updated since 2021. While PGF (which contains Datavisualization) is still actively updated. This is not to say that PGFPlots is not a good package, it is still widely use and can plot things that Datavisualization cannot. But it is worth noting that Datavisualization is the newer package and is more  user-friendly when a simpler plot is needed.</p> <p>Note</p> <p>The following sections will include examples of both <code>pgfplots</code> and <code>datavisualization</code> to show the differences between the two packages, where applicable. Some plots may not be available in <code>datavisualization</code> and will be shown using <code>pgfplots</code> only.</p>"},{"location":"tikz.html#scatter-plots","title":"Scatter Plots","text":""},{"location":"tikz.html#datavisualization","title":"Datavisualization","text":"<pre><code>\\usetikzlibrary{datavisualization}\n\\begin{document}\n\\begin{tikzpicture}\n\\datavisualization [\n    scientific axes={clean, width=.55\\textwidth, height=5.5cm},\n    x axis={ticks=few},\n    y axis={max value=250, min value=-20},\n    all axes={grid},\n    visualize as scatter/.list={explt},\n    text=gray,\n    visualizer color=red!90,\n    explt={style={red,line width=2pt}}\n    ] \n    data [set=explt] {\n        x, y\n        0, 0\n        1, 3\n        2, 9\n        3, 17\n        4, 90\n        5, 21\n        6, 2\n        7, 229\n        8, 3\n        9, 81\n        10, 2\n    };\n\\end{tikzpicture}\n\\end{document}\n</code></pre>"},{"location":"tikz.html#pgfplots","title":"PGFPlots","text":"<pre><code>\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[grid=both, axis line style=gray, text=gray, xmin=0, xmax=10, xtick distance=2.5]\n\\addplot [only marks, color=red!90, line width=2pt] coordinates {\n        (0, 0)\n        (1, 3)\n        (2, 9)\n        (3, 17)\n        (4, 90)\n        (5, 21)\n        (6, 2)\n        (7, 229)\n        (8, 3)\n        (9, 81)\n        (10, 2)\n    };\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}\n</code></pre>"},{"location":"tikz.html#line-plots","title":"Line Plots","text":""},{"location":"tikz.html#datavisualization_1","title":"Datavisualization","text":"<pre><code>\\usetikzlibrary{datavisualization}\n\\begin{document}\n\\begin{tikzpicture}\n\\datavisualization [\n    scientific axes={clean, width=.55\\textwidth, height=5.5cm},\n    x axis={ticks=few},\n    y axis={max value=250, min value=-20},\n    all axes={grid},\n    visualize as smooth line/.list={explt},\n    text=gray,\n    visualizer color=red!90,\n    explt={style={red,line width=2pt}}\n    ] \n    data [set=explt] {\n        x, y\n        0, 0\n        1, 3\n        2, 9\n        3, 17\n        4, 90\n        5, 21\n        6, 2\n        7, 229\n        8, 3\n        9, 81\n        10, 2\n    };\n\\end{tikzpicture}\n\\end{document}\n</code></pre>"},{"location":"tikz.html#pgfplots_1","title":"PGFPlots","text":"<pre><code>\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[grid=both, axis line style=gray, text=gray, xmin=0, xmax=10, xtick distance=2.5]\n\\addplot [smooth, color=red!90, line width=2pt] coordinates {\n        (0, 0)\n        (1, 3)\n        (2, 9)\n        (3, 17)\n        (4, 90)\n        (5, 21)\n        (6, 2)\n        (7, 229)\n        (8, 3)\n        (9, 81)\n        (10, 2)\n    };\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}\n</code></pre>"},{"location":"tikz.html#bar-plots","title":"Bar Plots","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only.</p> <pre><code>\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[grid=both, axis line style=gray, text=gray, xmin=0, xmax=10, xtick distance=2.5]\n\\addplot [ybar, color=red!90, fill=red!90, fill opacity=0.2, line width=2pt] coordinates {\n        (0, 0)\n        (1, 3)\n        (2, 9)\n        (3, 17)\n        (4, 90)\n        (5, 21)\n        (6, 2)\n        (7, 229)\n        (8, 3)\n        (9, 81)\n        (10, 2)\n    };\n\\end{axis}\n\\end{tikzpicture}\n\\end{document}\n</code></pre>"},{"location":"tikz.html#stacked-plots","title":"Stacked Plots","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only.</p> <pre><code>\\usepackage{pgfplots}\n\\pgfsetblendmode{screen}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[\n    stack plots=y,\n    text=gray, \n    area style,\n    enlarge x limits=false,\n    smooth,\n    fill opacity=0.7,\n    grid=both, \n    axis line style=gray,\n    xmin=0, \n    xmax=10,    \n    xtick distance=2.5\n]\n    \\addplot coordinates\n        {(0,1) (1,1) (2,2) (3,2) (4, 20) (5, 21) (6, 2) (7, 19) (8, 20) (9, 1) (10, 2)}\n            \\closedcycle;\n    \\addplot coordinates\n        {(0,1) (1,3) (2,7) (3,2) (4, 3) (5, 25) (6, 2) (7, 19) (8, 4) (9, 10) (10, 8)}\n            \\closedcycle;\n    \\addplot coordinates\n        {(0,1) (1,4) (2,2) (3,2) (4, 13) (5, 11) (6, 20) (7, 12) (8, 15) (9, 23) (10, 12)}\n            \\closedcycle;\n    \\end{axis}\n\\end{tikzpicture} \n\\end{document}\n</code></pre>"},{"location":"tikz.html#box-plots","title":"Box Plots","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only.</p> <pre><code>\\usepackage{pgfplots}\n\\usepgfplotslibrary{statistics}\n\n\\begin{document}\n    \\begin{tikzpicture}\n        \\begin{axis}[grid=both, axis line style=gray, text=gray, xtick distance=2.5]\n            \\addplot+ [boxplot, color=red!90, fill=red!90, fill opacity=0.2, line width=2pt] table [row sep=\\\\,y index=0] {\n                data\\\\\n                0\\\\\n                3\\\\\n                9\\\\\n                17\\\\\n                21\\\\\n                2\\\\\n                3\\\\\n                2\\\\\n            };\n        \\end{axis}\n    \\end{tikzpicture}\n\\end{document}\n</code></pre> <p></p>"},{"location":"tikz.html#histograms","title":"Histograms","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only.</p> <pre><code>\\usepackage{pgfplots}\n\\usepgfplotslibrary{statistics}\n\n\\begin{document}\n    \\begin{tikzpicture}\n        \\begin{axis}[ybar interval, grid=both, axis line style=gray, text=gray, xtick distance=2.5]\n            \\addplot+ [hist={bins=5}, color=red!90, fill=red!90, fill opacity=0.2, line width=2pt] table [row sep=\\\\,y index=0] {\n                data\\\\\n                0\\\\\n                3\\\\\n                9\\\\\n                17\\\\\n                21\\\\\n                2\\\\\n                3\\\\\n                2\\\\\n            };\n        \\end{axis}\n    \\end{tikzpicture}\n\\end{document}\n</code></pre> <p></p>"},{"location":"tikz.html#heat-maps","title":"Heat Maps","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only.</p> <pre><code>\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n\\begin{axis}[enlargelimits=false,colorbar, axis line style=gray, text=gray, colormap/viridis, colorbar style={text=gray}]\n    \\addplot [matrix plot,\n        point meta=explicit,\n    ] coordinates {\n        (0,0) [0] (1,0) [1] (2,0) [2] (3,0) [1] (4,0) [2] (5,0) [1]\n\n        (0,1) [3] (1,1) [43] (2,1) [51] (3,1) [12] (4,1) [2] (5,1) [13]\n\n        (0,2) [36] (1,2) [7] (2,2) [28] (3,2) [31] (4,2) [42] (5,2) [1]\n\n        (0,3) [0] (1,3) [41] (2,3) [2] (3,3) [1] (4,3) [2] (5,3) [9]\n\n        (0,4) [3] (1,4) [4] (2,4) [5] (3,4) [1] (4,4) [32] (5,4) [1]\n\n        (0,5) [6] (1,5) [72] (2,5) [68] (3,5) [1] (4,5) [2] (5,5) [1]\n    };\n\\end{axis}\n\\end{tikzpicture} \n\\end{document}\n</code></pre>"},{"location":"tikz.html#contour-plots","title":"Contour Plots","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only. Requires LuaLaTeX.</p> <pre><code>\\usepackage{pgfplots}\n\\pgfplotsset{height=5.5cm,compat=1.18}\n\\begin{document}\n    \\begin{tikzpicture}\n        \\begin{axis}[view={0}{90}, axis line style=gray, text=gray]\n            \\addplot3 [\n            contour lua={number=14, labels=false}\n            ] {x*y};\n        \\end{axis}\n    \\end{tikzpicture} \n\\end{document}\n</code></pre> <p></p>"},{"location":"tikz.html#3d-plots","title":"3D Plots","text":"<p>Note</p> <p>Shown using <code>pgfplots</code> only. This can be very resource intensive and may not work on all systems.</p> <pre><code>\\usepackage{pgfplots}\n\\begin{document}\n\\begin{tikzpicture}\n    \\begin{axis}[\n        3d box=complete,\n        grid=major,\n        samples=5, domain=-5:5,\n        xtick=data, ytick=data,\n        axis line style=gray, \n        text=gray, \n        colormap/viridis\n    ]\n        \\addplot3 [surf] {x*y};\n    \\end{axis}\n\\end{tikzpicture}%\n\\end{document}\n</code></pre>"},{"location":"tikz.html#pgf-math-capabilities","title":"PGF Math Capabilities","text":"<p>PGF has extensive math capabilities, and you can use it to create complex mathematical expressions. This is particularly useful if you need to perform operations on data or create complex mathematical diagrams.</p> <p>For example polynomial approximation can be done with the following code:</p> <pre><code>\\pgfmathveclen{x}{y} \\pgfmathresult\n</code></pre> <p>This is not a replacement for a full programming language, but it can be useful for simple calculations. More information on the math capabilities of PGF can be found in the  TikZ &amp; PGF Manual  under section 94.</p> <p>Note</p> <p>For more comprehensive mathematical operations and manipulations please refer to Extending LaTeX.</p>"},{"location":"tikz.html#importing-graphics-from-matlab","title":"Importing Graphics from MATLAB","text":"<p>Note</p> <p>I do not use MATLAB and have not tested this method. This is based on the documentation available.</p> <p>It is possible to import graphics from MATLAB in to LaTeX using <code>matlab2tikz</code> script. This script will convert your MATLAB graphics in to TikZ code that you can then import in to your LaTeX document. This is particularly useful if you are more comfortable with MATLAB and want to create complex graphics in MATLAB and then import them in to LaTeX.</p> <p>To use <code>matlab2tikz</code>, you will need to install it in MATLAB. You can do this by downloading the script from the Mathworks File exchange matlab2tikz  and then adding it to your MATLAB path. You can then use the <code>matlab2tikz</code> function to convert your MATLAB graphics in  to TikZ code.</p> <p>For example, you can create a simple plot in MATLAB:</p> <pre><code>x = linspace(0,2*pi,100);\ny = sin(x);\nplot(x,y)\n</code></pre> <p>And then convert it to TikZ code using <code>matlab2tikz</code>:</p> <pre><code>matlab2tikz('test.tex')\n</code></pre>"},{"location":"tikz.html#tikz-without-the-tikz","title":"TikZ without the TikZ","text":"<p>For those that do not want to learn TikZ, there are a few tools that can be used to create TikZ code without actually writing it. These tools are:</p> <ul> <li>Inkscape</li> <li>Ipe</li> </ul> <p>This guide will not delve in to the specifics of these tools, but they are worth mentioning for those that do not want to learn TikZ. And good guidance is available in their respective documentation.</p>"},{"location":"tikz.html#inkscape","title":"Inkscape","text":"<p>Inkscape is a powerful vector graphics editor that can be used to create TikZ code. This is particularly useful for creating complex graphics that would be difficult to create just writing the code by hand. To allow for TikZ code to be exported from Inkscape, you will need to install the SVG2TikZ extension. This Provides a simple way to convert SVG files and inkscape projects to TikZ code.</p>"},{"location":"tikz.html#ipe","title":"Ipe","text":"<p>Ipe is a powerful graphics editor that incorporates LaTeX. It, like inkscape requires an extension(ipelets) to export TikZ code. The extension is called Ipe2TikZ , although it has been out of development for a while it still works well, there is a more recently active fork available here.</p>"},{"location":"tikz.html#pgfplotsedt","title":"PGFPlotsEdt","text":"<p>PGFPlotsEdt is a tool that can be used to create TikZ code for PGFPlots.  It is a web-based tool that allows you to create plots and then export the TikZ code. It is particularly useful for creating plots quickly and easily or if you are not comfortable writing TikZ code by hand. It additionally allows you to upload data files to create plots from.</p> <p>As this is a web-based tool, just be cautious of the information you give it.</p>"},{"location":"tikz.html#alternatives","title":"Alternatives","text":""},{"location":"tikz.html#latex-picture-environment","title":"LaTeX Picture Environment","text":"<p>The standard LaTeX {picture} environment allows you to create simple graphics, but little more.</p>"},{"location":"tikz.html#pstricks","title":"PSTricks","text":"<p>PSTricks package is powerful enough to create any kind of graphic, but it is not really portable.  It has more limited driver compatibility than TikZ and is not as widely used.</p> <p>Compared to TikZ, PSTricks has a similar support base. There are many nice extra packages for special purpose situations that have been contributed by users over the last decade. The TikZ syntax is more consistent than the pstricks syntax as TikZ was developed \u201cin a more centralized manner\u201d and also \u201cwith the shortcomings on pstricks in mind\u201d.</p>"},{"location":"tikz.html#metapost","title":"METAPOST","text":"<p>METAPOST is a powerful alternative to TikZ. It used to be an external program, which entailed a bunch of problems,  but it is now built in.</p> <p>The main advantage of METAPOST is that it is a programming language, so you can do anything you want with it. The main disadvantage is that it is a programming language, so you have to learn it. </p> <p>More information on it can be found in the METAPOST manual. Or additionally in the METAFUN manual from context and the creator of LuaLaTeX and context Hans Hagen. METAFUN manual</p>"},{"location":"tikz.html#asymptote","title":"Asymptote","text":"<p>Asymptote is a powerful vector graphics language that is particularly well-suited for creating complex graphics. It is similar to METAPOST in that it is a programming language, but it additionally requires a separate program to compile the code.</p>"},{"location":"tikz.html#gnuplot","title":"gnuplot","text":"<p>Gnuplot is a powerful plotting program that can be used to create graphics in LaTeX. It is particularly useful for creating 2D and 3D plots, but it can also be used to create other types of graphics. It is not as powerful as TikZ or PGF, but it is easier to use and can be used to create complex graphics. However, it also requires a separate program.</p>"},{"location":"units.html","title":"Units in LaTeX","text":"<p>Note</p> <p>TLDR: It is recommended to use the <code>siunitx</code> package for typesetting units in LaTeX. The <code>units</code> package is simpler and easier to use, but it is also less powerful and flexible.</p> <p>There are a few ways to typeset units in LaTeX. The two most common ways are to use the <code>siunitx</code> package or to use  the <code>units</code> package. The <code>siunitx</code> package is more powerful and flexible, but the <code>units</code> package is simpler and  easier to use. This document will cover both methods.</p>"},{"location":"units.html#siunitx","title":"siunitx","text":"<p>The <code>siunitx</code> provides a wide range of options for formatting units, including the ability to control the spacing  between the number and the unit, the ability to automatically convert units, and the ability to define custom units.</p>"},{"location":"units.html#basic-usage","title":"Basic Usage","text":"<p>To use the <code>siunitx</code> package, you must first include it in your document preamble:</p> <pre><code>\\usepackage{siunitx}\n</code></pre> <p>Note</p> <p>Since version 3 it is no longer recommended to use <code>\\si</code> or <code>\\SI</code> anymore as they are deprecated. Instead,  use <code>\\qty</code>, <code>\\unit</code>, etc.</p> <p>Numbers can be typeset with <code>\\num</code>:</p> <pre><code>\\num{3.14159e-21}\n</code></pre> <p>This will produce the output \\(3.14159 \\times 10^{-21}\\).</p> <p>Units can be typeset with <code>\\unit</code>:</p> <pre><code>\\unit{kg}\n</code></pre> <p>Quantities can be typeset with <code>\\qty</code>:</p> <pre><code>\\qty{3.14159}{kg}\n</code></pre> <p>And angles can be typeset with <code>\\ang</code>:</p> <pre><code>\\ang{90}\n</code></pre>"},{"location":"units.html#writing-units","title":"Writing units","text":"<p>The <code>siunitx</code> package provides a number of options for calling units. For example you can use full names or  abbreviations:</p> <pre><code>\\unit{kg.m.s^{-1}}\n</code></pre> <p>or</p> <pre><code>\\unit{\\kilogram\\meter\\per\\second}\n</code></pre> <p>These will both produce the output \\(\\text{kg m s}^{-1}\\).</p> <p>If you use the option <code>per-mode=symbol</code> you will instead get the output \\(\\text{kg m/s}\\).</p>"},{"location":"units.html#custom-units","title":"Custom Units","text":"<p>The <code>siunitx</code> package also allows you to define custom units using the <code>\\DeclareSIUnit</code> command:</p> <pre><code>\\DeclareSIUnit{\\lightyear}{ly}\n</code></pre> <p>You can then use this custom unit in the same way as the built-in units:</p> <pre><code>\\qty{1}{\\lightyear}\n</code></pre> <p>This will produce the output \\(1 \\text{ ly}\\).</p>"},{"location":"units.html#units","title":"units","text":"<p>The <code>units</code> package is simpler and easier to use than the <code>siunitx</code> package, but it is also less powerful and flexible.</p>"},{"location":"units.html#basic-usage_1","title":"Basic Usage","text":"<p>To use the <code>units</code> package, you must first include it in your document preamble:</p> <pre><code>\\usepackage{units}\n</code></pre> <p>Numbers can be typeset with <code>\\unit</code>:</p> <pre><code>\\unit[3.14159e-21]{kg}\n</code></pre> <p>This will produce the output \\(3.14159\\text{e}^{-21} \\text{ kg}\\).</p> <p>Fractional units can be typeset with:</p> <pre><code>\\unitfrac[3.14159]{kg}{m}\n</code></pre> <p>This will produce the output \\(3.14159 \\text{ kg/m}\\).</p>"}]}